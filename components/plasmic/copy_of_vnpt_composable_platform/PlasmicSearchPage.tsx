/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9EC4CuzhysbPvP3VCVkLZh
// Component: 362ZaYY75ZRR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NhaTd from "../../NhaTd"; // plasmic-import: oY2WxEuoZMYU/component
import Button from "../../Button"; // plasmic-import: 8b0EpCKEWBCK/component
import { AntdBreadcrumb } from "@plasmicpkgs/antd5/skinny/registerBreadcrumb";
import { AntdBreadcrumbItem } from "@plasmicpkgs/antd5/skinny/registerBreadcrumb";
import TextInput from "../../TextInput"; // plasmic-import: -hxqxS1L-JW_/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import Modal from "../../Modal"; // plasmic-import: qt9kMpGR1rs_/component
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";
import Select from "../../Select"; // plasmic-import: Q9DPvojwXDcb/component
import MenuItem from "../../MenuItem"; // plasmic-import: 8zjSwXU6lca-/component
import MenuSection from "../../MenuSection"; // plasmic-import: WCcSKtjDwRef/component
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import CloseFilter from "../../CloseFilter"; // plasmic-import: On8dDTKxQRam/component
import { AntdOptionGroup } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdOption } from "@plasmicpkgs/antd5/skinny/registerSelect";
import SeachJobComponent from "../../SeachJobComponent"; // plasmic-import: 0EgktGnp9yoW/component
import { AntdPagination } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { paginationHelpers as AntdPagination_Helpers } from "@plasmicpkgs/antd5/skinny/registerPagination";
import Footer from "../../Footer"; // plasmic-import: 88XNNVHOq8_x/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9EC4CuzhysbPvP3VCVkLZh/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9EC4CuzhysbPvP3VCVkLZh/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9EC4CuzhysbPvP3VCVkLZh/projectcss
import sty from "./PlasmicSearchPage.module.css"; // plasmic-import: 362ZaYY75ZRR/css

import NotificationIcon from "./icons/PlasmicIcon__Notification"; // plasmic-import: esOtPKp2vWVW/icon
import Menu2Icon from "../library_tabler_3_2_icons/icons/PlasmicIcon__Menu2"; // plasmic-import: d1b8xWlyUKWm/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: LmY2C9AE0H1E/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: IZbzlkEshIXJ/icon
import CloseSvgrepoComSvgIcon from "./icons/PlasmicIcon__CloseSvgrepoComSvg"; // plasmic-import: SMiZHTztpvq8/icon
import SearchSvgrepoComSvgIcon from "./icons/PlasmicIcon__SearchSvgrepoComSvg"; // plasmic-import: 1lLTN0p_K5sV/icon
import LocationCheckSvgrepoComSvgIcon from "./icons/PlasmicIcon__LocationCheckSvgrepoComSvg"; // plasmic-import: cxruJQgN1lhV/icon
import ArrowsSortIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__ArrowsSort"; // plasmic-import: z2ooauzpMRIm/icon
import FilterListSvgrepoComSvgIcon from "./icons/PlasmicIcon__FilterListSvgrepoComSvg"; // plasmic-import: MNN5ZSG8-58X/icon

createPlasmicElementProxy;

export type PlasmicSearchPage__VariantMembers = {
  toggleFilter: "toggleFilter";
  closed: "closed";
  sidebarOpened: "sidebarOpened";
};
export type PlasmicSearchPage__VariantsArgs = {
  toggleFilter?: SingleBooleanChoiceArg<"toggleFilter">;
  closed?: SingleBooleanChoiceArg<"closed">;
  sidebarOpened?: SingleBooleanChoiceArg<"sidebarOpened">;
};
type VariantPropType = keyof PlasmicSearchPage__VariantsArgs;
export const PlasmicSearchPage__VariantProps = new Array<VariantPropType>(
  "toggleFilter",
  "closed",
  "sidebarOpened"
);

export type PlasmicSearchPage__ArgsType = {};
type ArgPropType = keyof PlasmicSearchPage__ArgsType;
export const PlasmicSearchPage__ArgProps = new Array<ArgPropType>();

export type PlasmicSearchPage__OverridesType = {
  root?: Flex__<"div">;
  headerBar?: Flex__<"div">;
  logo?: Flex__<"div">;
  overlay?: Flex__<"div">;
  nhaTd?: Flex__<typeof NhaTd>;
  menuSidebar?: Flex__<"div">;
  breadcrumb?: Flex__<typeof AntdBreadcrumb>;
  searchBar?: Flex__<"div">;
  searchInput?: Flex__<typeof TextInput>;
  modal?: Flex__<typeof Modal>;
  checkbox5?: Flex__<typeof AntdCheckbox>;
  provinceSearch?: Flex__<typeof Select>;
  menuItem?: Flex__<typeof MenuItem>;
  select2?: Flex__<typeof Select>;
  select3?: Flex__<typeof Select>;
  select4?: Flex__<typeof Select>;
  select11?: Flex__<typeof Select>;
  select12?: Flex__<typeof Select>;
  modal2?: Flex__<typeof Modal>;
  h4?: Flex__<"h4">;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
  select5?: Flex__<typeof Select>;
  modal3?: Flex__<typeof Modal>;
  checkbox6?: Flex__<typeof AntdCheckbox>;
  checkbox7?: Flex__<typeof AntdCheckbox>;
  checkbox8?: Flex__<typeof AntdCheckbox>;
  select13?: Flex__<typeof Select>;
  select14?: Flex__<typeof Select>;
  select15?: Flex__<typeof Select>;
  filterTablet?: Flex__<"div">;
  closeFilter?: Flex__<typeof CloseFilter>;
  experienceFilterTablet?: Flex__<"div">;
  checkbox?: Flex__<typeof AntdCheckbox>;
  salaryFilterTablet?: Flex__<"div">;
  checkbox3?: Flex__<typeof AntdCheckbox>;
  checkbox4?: Flex__<typeof AntdCheckbox>;
  select?: Flex__<typeof Select>;
  select9?: Flex__<typeof Select>;
  select10?: Flex__<typeof Select>;
  searchContent?: Flex__<"div">;
  filterLaptop?: Flex__<"div">;
  experience?: Flex__<typeof AntdCheckbox>;
  checkbox2?: Flex__<typeof AntdCheckbox>;
  hinhThucLamViecFilter?: Flex__<typeof AntdCheckbox>;
  select6?: Flex__<typeof Select>;
  select7?: Flex__<typeof Select>;
  optionGroup?: Flex__<typeof AntdOptionGroup>;
  select8?: Flex__<typeof Select>;
  seachJobComponent?: Flex__<typeof SeachJobComponent>;
  noDataInterface?: Flex__<"div">;
  pagination?: Flex__<typeof AntdPagination>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultSearchPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSearchPage__RenderFunc(props: {
  variants: PlasmicSearchPage__VariantsArgs;
  args: PlasmicSearchPage__ArgsType;
  overrides: PlasmicSearchPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "searchInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "provinceSearch.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "provinceSearch.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select3.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select4.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select5.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "experience[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "checkbox2[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "select6.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select7.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select8.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "pagination.currentPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.page;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 2;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "pagination.pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 10,

        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "pagination.startIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "pagination.endIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      },
      {
        path: "hinhThucLamViecFilter[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "totalItem",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "experienceFilter",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "page",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "salaryFilter",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "workingFormFilter",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "toggleFilter",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.isFilterOpen ? "toggleFilter" : "closed";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.toggleFilter
      },
      {
        path: "isFilterOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "closed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {})();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.closed
      },
      {
        path: "checkbox[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "checkbox3[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "checkbox4[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "select.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select9.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select10.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sidebarOpened",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.isMenuOpen ? "sidebarOpened" : null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.sidebarOpened
      },
      {
        path: "isMenuOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox5[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "select11.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select12.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal2.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal3.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox6[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "checkbox7[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "checkbox8[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "select13.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select14.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select15.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select15.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicSearchPage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSearchPage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSearchPage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_library_tailwind_3_4_colors,
            styleTokensClassNames_library_tailwind_3_4_number_tokens,
            styleTokensClassNames_plasmic_rich_components,
            sty.root,
            {
              [sty.rootclosed]: hasVariant($state, "closed", "closed"),
              [sty.rootsidebarOpened]: hasVariant(
                $state,
                "sidebarOpened",
                "sidebarOpened"
              ),
              [sty.roottoggleFilter]: hasVariant(
                $state,
                "toggleFilter",
                "toggleFilter"
              )
            }
          )}
        >
          <div
            data-plasmic-name={"headerBar"}
            data-plasmic-override={overrides.headerBar}
            className={classNames(projectcss.all, sty.headerBar, {
              [sty.headerBartoggleFilter]: hasVariant(
                $state,
                "toggleFilter",
                "toggleFilter"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ngw0X)}>
              <div
                data-plasmic-name={"logo"}
                data-plasmic-override={overrides.logo}
                className={classNames(projectcss.all, sty.logo)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHomepage"] = true
                    ? (() => {
                        const actionArgs = { destination: `/` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHomepage"] != null &&
                    typeof $steps["goToHomepage"] === "object" &&
                    typeof $steps["goToHomepage"].then === "function"
                  ) {
                    $steps["goToHomepage"] = await $steps["goToHomepage"];
                  }
                }}
              >
                <div className={classNames(projectcss.all, sty.freeBox__rvAof)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__n266L)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "40px"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "45px"
                        : "64px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "40px"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "44px"
                        : "64px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/copy_of_vnpt_composable_platform/images/emblemOfVietnamSvg1.png",
                      fullWidth: 1280,
                      fullHeight: 1305,
                      aspectRatio: undefined
                    }}
                  />

                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (() => {
                          try {
                            return $state.isMenuOpen;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <div
                      data-plasmic-name={"overlay"}
                      data-plasmic-override={overrides.overlay}
                      className={classNames(projectcss.all, sty.overlay, {
                        [sty.overlaysidebarOpened]: hasVariant(
                          $state,
                          "sidebarOpened",
                          "sidebarOpened"
                        )
                      })}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateIsMenuOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["isMenuOpen"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateIsMenuOpen"] != null &&
                          typeof $steps["updateIsMenuOpen"] === "object" &&
                          typeof $steps["updateIsMenuOpen"].then === "function"
                        ) {
                          $steps["updateIsMenuOpen"] = await $steps[
                            "updateIsMenuOpen"
                          ];
                        }
                      }}
                    />
                  ) : null}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__l2Iw)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5HX6U
                    )}
                  >
                    {"B\u1ed8 N\u1ed8I V\u1ee4"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1WNck
                    )}
                  >
                    {"S\u00c0N GIAO D\u1ecaCH VI\u1ec6C L\u00c0M QU\u1ed0C GIA"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hAwlc,
                      {
                        [sty.textclosed__hAwlc65Qyh]: hasVariant(
                          $state,
                          "closed",
                          "closed"
                        ),
                        [sty.texttoggleFilter__hAwlcRduS9]: hasVariant(
                          $state,
                          "toggleFilter",
                          "toggleFilter"
                        )
                      }
                    )}
                  >
                    {
                      "Vi\u1ec7c t\u00ecm ng\u01b0\u1eddi - Ng\u01b0\u1eddi t\u00ecm vi\u1ec7c"
                    }
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___25Jhd)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eqt68
                  )}
                >
                  {"Vi\u1ec7c l\u00e0m"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___04ZbN
                  )}
                >
                  {"Phi\u00ean GDVL"}
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__uzMqJ)}>
              <NhaTd
                data-plasmic-name={"nhaTd"}
                data-plasmic-override={overrides.nhaTd}
                className={classNames("__wab_instance", sty.nhaTd)}
              />

              <div className={classNames(projectcss.all, sty.freeBox__ol5Gd)}>
                <NotificationIcon
                  className={classNames(projectcss.all, sty.svg__vZfin)}
                  role={"img"}
                />
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__m8NBw)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateIsMenuOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["isMenuOpen"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateIsMenuOpen"] != null &&
                    typeof $steps["updateIsMenuOpen"] === "object" &&
                    typeof $steps["updateIsMenuOpen"].then === "function"
                  ) {
                    $steps["updateIsMenuOpen"] = await $steps[
                      "updateIsMenuOpen"
                    ];
                  }
                }}
              >
                <Menu2Icon
                  className={classNames(projectcss.all, sty.svg__blXIz)}
                  role={"img"}
                />
              </div>
              <Button
                className={classNames("__wab_instance", sty.button__kIyJ)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5Nu
                    )}
                  >
                    {"\u0110\u0103ng nh\u1eadp"}
                  </div>
                }
              />
            </div>
          </div>
          <div
            data-plasmic-name={"menuSidebar"}
            data-plasmic-override={overrides.menuSidebar}
            className={classNames(projectcss.all, sty.menuSidebar, {
              [sty.menuSidebarclosed]: hasVariant($state, "closed", "closed"),
              [sty.menuSidebarsidebarOpened]: hasVariant(
                $state,
                "sidebarOpened",
                "sidebarOpened"
              ),
              [sty.menuSidebartoggleFilter]: hasVariant(
                $state,
                "toggleFilter",
                "toggleFilter"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__gnkLe, {
                [sty.freeBoxsidebarOpened__gnkLeHs40I]: hasVariant(
                  $state,
                  "sidebarOpened",
                  "sidebarOpened"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox___2PGuM, {
                  [sty.freeBoxsidebarOpened___2PGuMHs40I]: hasVariant(
                    $state,
                    "sidebarOpened",
                    "sidebarOpened"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__tPxUi, {
                    [sty.freeBoxsidebarOpened__tPxUiHs40I]: hasVariant(
                      $state,
                      "sidebarOpened",
                      "sidebarOpened"
                    )
                  })}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__fit, {
                      [sty.imgsidebarOpened__fitHs40I]: hasVariant(
                        $state,
                        "sidebarOpened",
                        "sidebarOpened"
                      )
                    })}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"40px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/copy_of_vnpt_composable_platform/images/emblemOfVietnamSvg1.png",
                      fullWidth: 1280,
                      fullHeight: 1305,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__kC1ZF, {
                      [sty.freeBoxsidebarOpened__kC1ZFHs40I]: hasVariant(
                        $state,
                        "sidebarOpened",
                        "sidebarOpened"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dhptw
                      )}
                    >
                      {"B\u1ed8 N\u1ed8I V\u1ee4"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__t0Wmu,
                        {
                          [sty.textsidebarOpened__t0WmuHs40I]: hasVariant(
                            $state,
                            "sidebarOpened",
                            "sidebarOpened"
                          )
                        }
                      )}
                    >
                      {
                        "S\u00c0N GIAO D\u1ecaCH VI\u1ec6C L\u00c0M QU\u1ed0C GIA"
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9DoKs,
                        {
                          [sty.textsidebarOpened___9DoKsHs40I]: hasVariant(
                            $state,
                            "sidebarOpened",
                            "sidebarOpened"
                          )
                        }
                      )}
                    >
                      {
                        "Vi\u1ec7c t\u00ecm ng\u01b0\u1eddi - Ng\u01b0\u1eddi t\u00ecm vi\u1ec7c"
                      }
                    </div>
                  </div>
                </div>
                <CloseSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__fw2Of, {
                    [sty.svgsidebarOpened__fw2OfHs40I]: hasVariant(
                      $state,
                      "sidebarOpened",
                      "sidebarOpened"
                    )
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateIsMenuOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["isMenuOpen"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateIsMenuOpen"] != null &&
                      typeof $steps["updateIsMenuOpen"] === "object" &&
                      typeof $steps["updateIsMenuOpen"].then === "function"
                    ) {
                      $steps["updateIsMenuOpen"] = await $steps[
                        "updateIsMenuOpen"
                      ];
                    }
                  }}
                  role={"img"}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__hh1P5)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zK1E9
                )}
              >
                {"Vi\u1ec7c l\u00e0m"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jfXdg,
                  {
                    [sty.textsidebarOpened__jfXdgHs40I]: hasVariant(
                      $state,
                      "sidebarOpened",
                      "sidebarOpened"
                    )
                  }
                )}
              >
                {"Phi\u00ean GDVL"}
              </div>
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__nED1, {
              [sty.freeBoxclosed__nED165Qyh]: hasVariant(
                $state,
                "closed",
                "closed"
              ),
              [sty.freeBoxsidebarOpened__nED1Hs40I]: hasVariant(
                $state,
                "sidebarOpened",
                "sidebarOpened"
              ),
              [sty.freeBoxtoggleFilter__nED1RduS9]: hasVariant(
                $state,
                "toggleFilter",
                "toggleFilter"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__yaPJ)}>
              <AntdBreadcrumb
                data-plasmic-name={"breadcrumb"}
                data-plasmic-override={overrides.breadcrumb}
                className={classNames("__wab_instance", sty.breadcrumb)}
                itemsRaw={
                  <React.Fragment>
                    <AntdBreadcrumbItem
                      className={classNames(
                        "__wab_instance",
                        sty.breadcrumbItem__hnn1E
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wp12L
                        )}
                      >
                        {"Trang ch\u1ee7"}
                      </div>
                    </AntdBreadcrumbItem>
                    <AntdBreadcrumbItem
                      className={classNames(
                        "__wab_instance",
                        sty.breadcrumbItem__vogJm
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__x6BAt
                        )}
                      >
                        {"T\u00ecm ki\u1ebfm vi\u1ec7c l\u00e0m"}
                      </div>
                    </AntdBreadcrumbItem>
                  </React.Fragment>
                }
                separator={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eWg3J
                    )}
                  >
                    {"/"}
                  </div>
                }
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__k7MSc)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__echWl
                )}
              >
                {
                  "T\u00ecm Vi\u1ec7c l\u00e0m, C\u00f4ng ty v\u00e0 C\u01a1 h\u1ed9i ngh\u1ec1 nghi\u1ec7p"
                }
              </div>
              <div
                data-plasmic-name={"searchBar"}
                data-plasmic-override={overrides.searchBar}
                className={classNames(projectcss.all, sty.searchBar)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__usChu)}>
                  <SearchSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__xxdNn)}
                    role={"img"}
                  />

                  <TextInput
                    data-plasmic-name={"searchInput"}
                    data-plasmic-override={overrides.searchInput}
                    className={classNames("__wab_instance", sty.searchInput)}
                    inputType={"search"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "searchInput",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async val => {
                        const $steps = {};

                        $steps["updateSearchInputValue"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["searchInput", "value"]
                                },
                                operation: 0,
                                value: $state.searchInput.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSearchInputValue"] != null &&
                          typeof $steps["updateSearchInputValue"] ===
                            "object" &&
                          typeof $steps["updateSearchInputValue"].then ===
                            "function"
                        ) {
                          $steps["updateSearchInputValue"] = await $steps[
                            "updateSearchInputValue"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={"T\u00ecm vi\u1ec7c...."}
                    type={"plain"}
                    value={generateStateValueProp($state, [
                      "searchInput",
                      "value"
                    ])}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__qpliK)}
                  >
                    <DataFetcher
                      body={{
                        path: [],
                        params: [{ key: "window.localStorage?.access_token" }],
                        viewMode: true,
                        applicationId: "6847dda4cceeff07d3563162",
                        queryId: "5tegmm3dki33bvz5k5lh60r5"
                      }}
                      className={classNames(
                        "__wab_instance",
                        sty.httpRestApiFetcher__soRqH
                      )}
                      dataName={"provincesData"}
                      errorDisplay={
                        <DataCtxReader__>
                          {$ctx => "Error fetching data"}
                        </DataCtxReader__>
                      }
                      errorName={"provincesError"}
                      loadingDisplay={
                        <DataCtxReader__>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__l6FZf
                              )}
                            >
                              {"Loading..."}
                            </div>
                          )}
                        </DataCtxReader__>
                      }
                      method={"POST"}
                      noLayout={false}
                      previewSpinner={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? false
                          : undefined
                      }
                      url={"https://vieclam.gov.vn/api/query/execute"}
                    >
                      <DataCtxReader__>
                        {$ctx => (
                          <React.Fragment>
                            <Modal
                              data-plasmic-name={"modal"}
                              data-plasmic-override={overrides.modal}
                              className={classNames(
                                "__wab_instance",
                                sty.modal
                              )}
                              content={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__p0COn
                                  )}
                                >
                                  {(_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return $ctx.provincesData.data.data;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                    const currentItem = __plasmic_item_0;
                                    const currentIndex = __plasmic_idx_0;
                                    return (
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__g2U4
                                        )}
                                        key={currentIndex}
                                      >
                                        {(() => {
                                          const child$Props = {
                                            checked: generateStateValueProp(
                                              $state,
                                              [
                                                "checkbox5",
                                                __plasmic_idx_0,
                                                "checked"
                                              ]
                                            ),
                                            className: classNames(
                                              "__wab_instance",
                                              sty.checkbox5
                                            ),
                                            onChange: async (
                                              ...eventArgs: any
                                            ) => {
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "checkbox5",
                                                  __plasmic_idx_0,
                                                  "checked"
                                                ]
                                              ).apply(null, eventArgs);
                                            }
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "checked",
                                                plasmicStateName:
                                                  "checkbox5[].checked"
                                              }
                                            ],
                                            [__plasmic_idx_0],
                                            undefined ?? {},
                                            child$Props
                                          );
                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "checkbox5[].checked",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) => undefined
                                              }
                                            ],
                                            [__plasmic_idx_0]
                                          );
                                          return (
                                            <AntdCheckbox
                                              data-plasmic-name={"checkbox5"}
                                              data-plasmic-override={
                                                overrides.checkbox5
                                              }
                                              {...child$Props}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__g2Lx8
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return currentItem.ten;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "Checkbox";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </AntdCheckbox>
                                          );
                                        })()}
                                      </div>
                                    );
                                  })}
                                </div>
                              }
                              heading={
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3__lqORj
                                  )}
                                >
                                  {
                                    "Danh s\u00e1ch t\u1ec9nh/th\u00e0nh ph\u1ed1"
                                  }
                                </h3>
                              }
                              isOpen={generateStateValueProp($state, [
                                "modal",
                                "isOpen"
                              ])}
                              onOpenChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "modal",
                                  "isOpen"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              trigger={
                                <Button
                                  end={
                                    <LocationCheckSvgrepoComSvgIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__rnSeW
                                      )}
                                      role={"img"}
                                    />
                                  }
                                  iconEnd={true}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__iW6VZ
                                      )}
                                    >
                                      {"Open Modal"}
                                    </div>
                                  }
                                />
                              }
                            />

                            <Select
                              data-plasmic-name={"provinceSearch"}
                              data-plasmic-override={overrides.provinceSearch}
                              className={classNames(
                                "__wab_instance",
                                sty.provinceSearch
                              )}
                              isOpen={generateStateValueProp($state, [
                                "provinceSearch",
                                "isOpen"
                              ])}
                              items={(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $ctx.provincesData.data.data;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <MenuItem
                                    data-plasmic-name={"menuItem"}
                                    data-plasmic-override={overrides.menuItem}
                                    key={currentIndex}
                                    label={(() => {
                                      try {
                                        return currentItem.ten;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Item 1";
                                        }
                                        throw e;
                                      }
                                    })()}
                                    value={(() => {
                                      try {
                                        return currentItem.ma;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                );
                              })}
                              label={"Label"}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "provinceSearch",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }

                                (async val => {
                                  const $steps = {};

                                  $steps["updateProvinceSearchValue"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "provinceSearch",
                                              "value"
                                            ]
                                          },
                                          operation: 0
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateProvinceSearchValue"] !=
                                      null &&
                                    typeof $steps[
                                      "updateProvinceSearchValue"
                                    ] === "object" &&
                                    typeof $steps["updateProvinceSearchValue"]
                                      .then === "function"
                                  ) {
                                    $steps["updateProvinceSearchValue"] =
                                      await $steps["updateProvinceSearchValue"];
                                  }
                                }).apply(null, eventArgs);
                              }}
                              onOpenChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "provinceSearch",
                                  "isOpen"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"\u0110\u1ecba \u0111i\u1ec3m"}
                              showLabel={false}
                              value={generateStateValueProp($state, [
                                "provinceSearch",
                                "value"
                              ])}
                            />
                          </React.Fragment>
                        )}
                      </DataCtxReader__>
                    </DataFetcher>
                  </div>
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__bqhMi)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jjh4W
                      )}
                    >
                      {"T\u00ecm ki\u1ebfm"}
                    </div>
                  }
                  openLinkInNewTab={false}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__dbMe8)}>
                <div className={classNames(projectcss.all, sty.freeBox__j4P5I)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fmCnr)}
                  >
                    <Select
                      data-plasmic-name={"select2"}
                      data-plasmic-override={overrides.select2}
                      className={classNames("__wab_instance", sty.select2)}
                      isOpen={generateStateValueProp($state, [
                        "select2",
                        "isOpen"
                      ])}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select2",
                          "value"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select2",
                          "isOpen"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={"T\u1ea5t c\u1ea3 ng\u00e0nh ngh\u1ec1"}
                      showLabel={false}
                      value={generateStateValueProp($state, [
                        "select2",
                        "value"
                      ])}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kQIiK)}
                  >
                    <Select
                      data-plasmic-name={"select3"}
                      data-plasmic-override={overrides.select3}
                      className={classNames("__wab_instance", sty.select3)}
                      isOpen={generateStateValueProp($state, [
                        "select3",
                        "isOpen"
                      ])}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select3",
                          "value"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select3",
                          "isOpen"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={"T\u1ea5t c\u1ea3 c\u1ea5p b\u1eadc"}
                      showLabel={false}
                      value={generateStateValueProp($state, [
                        "select3",
                        "value"
                      ])}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pa4I)}
                  >
                    <Select
                      data-plasmic-name={"select4"}
                      data-plasmic-override={overrides.select4}
                      className={classNames("__wab_instance", sty.select4)}
                      isOpen={generateStateValueProp($state, [
                        "select4",
                        "isOpen"
                      ])}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select4",
                          "value"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select4",
                          "isOpen"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={"T\u1ea5t c\u1ea3 l\u0129nh v\u1ef1c"}
                      showLabel={false}
                      value={generateStateValueProp($state, [
                        "select4",
                        "value"
                      ])}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jmrM7)}
                  >
                    <CloseSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__ptrH)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eWi1
                      )}
                    >
                      {"B\u1ecf ch\u1ecdn"}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__j1LBz)}>
                  <Select
                    data-plasmic-name={"select11"}
                    data-plasmic-override={overrides.select11}
                    className={classNames("__wab_instance", sty.select11)}
                    isOpen={generateStateValueProp($state, [
                      "select11",
                      "isOpen"
                    ])}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select11",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select11",
                        "isOpen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"T\u1ea5t c\u1ea3 c\u1ea5p b\u1eadc"}
                    showLabel={false}
                    value={generateStateValueProp($state, [
                      "select11",
                      "value"
                    ])}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__eDDsz)}>
                  <Select
                    data-plasmic-name={"select12"}
                    data-plasmic-override={overrides.select12}
                    className={classNames("__wab_instance", sty.select12)}
                    isOpen={generateStateValueProp($state, [
                      "select12",
                      "isOpen"
                    ])}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select12",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select12",
                        "isOpen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"T\u1ea5t c\u1ea3 l\u0129nh v\u1ef1c"}
                    showLabel={false}
                    value={generateStateValueProp($state, [
                      "select12",
                      "value"
                    ])}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__slQ6S)}>
                  <CloseSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__c79Yp)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dmmVk
                    )}
                  >
                    {"B\u1ecf ch\u1ecdn"}
                  </div>
                </div>
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__wEwne, {
                [sty.freeBoxtoggleFilter__wEwneRduS9]: hasVariant(
                  $state,
                  "toggleFilter",
                  "toggleFilter"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox___7F72J, {
                  [sty.freeBoxtoggleFilter___7F72JRduS9]: hasVariant(
                    $state,
                    "toggleFilter",
                    "toggleFilter"
                  )
                })}
              >
                <div className={classNames(projectcss.all, sty.freeBox__cMwk)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yw6Pf
                    )}
                  >
                    {"K\u1ebft qu\u1ea3: "}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aNMa
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.totalItem;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lCw6B,
                      {
                        [sty.texttoggleFilter__lCw6BRduS9]: hasVariant(
                          $state,
                          "toggleFilter",
                          "toggleFilter"
                        )
                      }
                    )}
                  >
                    {"vi\u1ec7c l\u00e0m ph\u00f9 h\u1ee3p"}
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__e6L6K, {
                    [sty.freeBoxtoggleFilter__e6L6KRduS9]: hasVariant(
                      $state,
                      "toggleFilter",
                      "toggleFilter"
                    )
                  })}
                >
                  <Modal
                    data-plasmic-name={"modal2"}
                    data-plasmic-override={overrides.modal2}
                    className={classNames("__wab_instance", sty.modal2)}
                    content={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__spAg9
                        )}
                      >
                        <AntdRadioGroup
                          data-plasmic-name={"radioGroup"}
                          data-plasmic-override={overrides.radioGroup}
                          className={classNames(
                            "__wab_instance",
                            sty.radioGroup
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "radioGroup",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          options={(() => {
                            const __composite = [
                              { value: "option1", label: null },
                              { value: "option2", label: null }
                            ];
                            __composite["0"]["label"] =
                              "Tin m\u1edbi nh\u1ea5t";
                            __composite["1"]["label"] = "Tin c\u0169 nh\u1ea5t";
                            return __composite;
                          })()}
                          value={generateStateValueProp($state, [
                            "radioGroup",
                            "value"
                          ])}
                        >
                          <AntdRadio
                            className={classNames(
                              "__wab_instance",
                              sty.radio__vxiTe
                            )}
                            value={"op1"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qgFmZ
                              )}
                            >
                              {"Option 1"}
                            </div>
                          </AntdRadio>
                          <AntdRadio
                            className={classNames(
                              "__wab_instance",
                              sty.radio___7LL55
                            )}
                            value={"op2"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__klGiD
                              )}
                            >
                              {"Option 2"}
                            </div>
                          </AntdRadio>
                        </AntdRadioGroup>
                      </div>
                    }
                    heading={
                      <h4
                        data-plasmic-name={"h4"}
                        data-plasmic-override={overrides.h4}
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4
                        )}
                      >
                        {"S\u1eafp x\u1ebfp theo"}
                      </h4>
                    }
                    isOpen={generateStateValueProp($state, [
                      "modal2",
                      "isOpen"
                    ])}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "modal2",
                        "isOpen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    trigger={
                      <Button
                        iconStart={true}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__n1V3R
                            )}
                          >
                            {"Open Modal"}
                          </div>
                        }
                        start={
                          <ArrowsSortIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__czDps
                            )}
                            role={"img"}
                          />
                        }
                      />
                    }
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__haLR)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0WiN
                      )}
                    >
                      {"S\u1eafp x\u1ebfp theo"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___8JttP)}
                  >
                    <Select
                      data-plasmic-name={"select5"}
                      data-plasmic-override={overrides.select5}
                      className={classNames("__wab_instance", sty.select5)}
                      isOpen={generateStateValueProp($state, [
                        "select5",
                        "isOpen"
                      ])}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select5",
                          "value"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select5",
                          "isOpen"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      showLabel={false}
                      value={generateStateValueProp($state, [
                        "select5",
                        "value"
                      ])}
                    />
                  </div>
                  <Modal
                    data-plasmic-name={"modal3"}
                    data-plasmic-override={overrides.modal3}
                    className={classNames("__wab_instance", sty.modal3, {
                      [sty.modal3toggleFilter]: hasVariant(
                        $state,
                        "toggleFilter",
                        "toggleFilter"
                      )
                    })}
                    content={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lFtZl
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kwxyJ
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__e91Zm
                            )}
                          >
                            {
                              "L\u1ecdc theo Kinh nghi\u1ec7m l\u00e0m vi\u1ec7c\r"
                            }
                          </div>
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return [
                                  {
                                    key: 22,
                                    label: "Không có"
                                  },
                                  {
                                    key: 23,
                                    label: "Dưới 1 năm"
                                  },
                                  {
                                    key: 24,
                                    label: "Từ 1 - 2 năm"
                                  },
                                  {
                                    key: 31,
                                    label: "Từ 2 - 5 năm"
                                  },
                                  {
                                    key: 32,
                                    label: "Trên 5 năm"
                                  }
                                ];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__cMuih
                                )}
                                key={currentIndex}
                              >
                                {(() => {
                                  const child$Props = {
                                    checked: generateStateValueProp($state, [
                                      "checkbox6",
                                      __plasmic_idx_0,
                                      "checked"
                                    ]),
                                    className: classNames(
                                      "__wab_instance",
                                      sty.checkbox6
                                    ),
                                    defaultChecked: (() => {
                                      try {
                                        return $state.experienceFilter.includes(
                                          currentItem.key
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "checkbox6",
                                        __plasmic_idx_0,
                                        "checked"
                                      ]).apply(null, eventArgs);

                                      (async checked => {
                                        const $steps = {};

                                        $steps["updateExperienceFilter"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "experienceFilter"
                                                  ]
                                                },
                                                operation: 0,
                                                value:
                                                  $state.experienceFilter.includes(
                                                    currentItem.key
                                                  )
                                                    ? $state.experienceFilter.filter(
                                                        k =>
                                                          k !== currentItem.key
                                                      )
                                                    : [
                                                        ...$state.experienceFilter,
                                                        currentItem.key
                                                      ]
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateExperienceFilter"] !=
                                            null &&
                                          typeof $steps[
                                            "updateExperienceFilter"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateExperienceFilter"
                                          ].then === "function"
                                        ) {
                                          $steps["updateExperienceFilter"] =
                                            await $steps[
                                              "updateExperienceFilter"
                                            ];
                                        }
                                      }).apply(null, eventArgs);
                                    }
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "checked",
                                        plasmicStateName: "checkbox6[].checked"
                                      }
                                    ],
                                    [__plasmic_idx_0],
                                    undefined ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "checkbox6[].checked",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return $state.experienceFilter.includes(
                                                currentItem.key
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <AntdCheckbox
                                      data-plasmic-name={"checkbox6"}
                                      data-plasmic-override={
                                        overrides.checkbox6
                                      }
                                      {...child$Props}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__aPeDf
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.label;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "Checkbox";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </AntdCheckbox>
                                  );
                                })()}
                              </div>
                            );
                          })}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__atXj7
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tQ6O
                            )}
                          >
                            {"L\u1ecdc theo M\u1ee9c l\u01b0\u01a1ng\r"}
                          </div>
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return [
                                  {
                                    key: "12",
                                    label: "Từ 5 đến 10 triệu"
                                  },
                                  {
                                    key: "11",
                                    label: "Dưới 5 triệu"
                                  },
                                  {
                                    key: "13",
                                    label: "Từ 10 đến 20 triệu"
                                  },
                                  {
                                    key: "2020",
                                    label: "Từ 20 đến 50 triệu"
                                  },
                                  {
                                    key: "2021",
                                    label: "Trên 50 triệu"
                                  }
                                ];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__n5D5A
                                )}
                                key={currentIndex}
                              >
                                {(() => {
                                  const child$Props = {
                                    checked: generateStateValueProp($state, [
                                      "checkbox7",
                                      __plasmic_idx_0,
                                      "checked"
                                    ]),
                                    className: classNames(
                                      "__wab_instance",
                                      sty.checkbox7
                                    ),
                                    defaultChecked: (() => {
                                      try {
                                        return $state.salaryFilter.includes(
                                          currentItem.key
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "checkbox7",
                                        __plasmic_idx_0,
                                        "checked"
                                      ]).apply(null, eventArgs);

                                      (async checked => {
                                        const $steps = {};

                                        $steps["updateSalaryFilter"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["salaryFilter"]
                                                },
                                                operation: 0,
                                                value:
                                                  $state.salaryFilter.includes(
                                                    currentItem.key
                                                  )
                                                    ? $state.salaryFilter.filter(
                                                        k =>
                                                          k !== currentItem.key
                                                      )
                                                    : [
                                                        ...$state.salaryFilter,
                                                        currentItem.key
                                                      ]
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateSalaryFilter"] !=
                                            null &&
                                          typeof $steps[
                                            "updateSalaryFilter"
                                          ] === "object" &&
                                          typeof $steps["updateSalaryFilter"]
                                            .then === "function"
                                        ) {
                                          $steps["updateSalaryFilter"] =
                                            await $steps["updateSalaryFilter"];
                                        }
                                      }).apply(null, eventArgs);
                                    }
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "checked",
                                        plasmicStateName: "checkbox7[].checked"
                                      }
                                    ],
                                    [__plasmic_idx_0],
                                    undefined ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "checkbox7[].checked",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return $state.salaryFilter.includes(
                                                currentItem.key
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <AntdCheckbox
                                      data-plasmic-name={"checkbox7"}
                                      data-plasmic-override={
                                        overrides.checkbox7
                                      }
                                      {...child$Props}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__jrupV
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.label;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "Checkbox";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </AntdCheckbox>
                                  );
                                })()}
                              </div>
                            );
                          })}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___76L6A
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8PupN
                            )}
                          >
                            {
                              "L\u1ecdc theo H\u00ecnh th\u1ee9c l\u00e0m vi\u1ec7c\r"
                            }
                          </div>
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return [
                                  {
                                    key: "29",
                                    label: "Toàn thời gian"
                                  },
                                  {
                                    key: "30",
                                    label: "Bán thời gian"
                                  }
                                ];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__nJEo
                                )}
                                key={currentIndex}
                              >
                                {(() => {
                                  const child$Props = {
                                    checked: generateStateValueProp($state, [
                                      "checkbox8",
                                      __plasmic_idx_0,
                                      "checked"
                                    ]),
                                    className: classNames(
                                      "__wab_instance",
                                      sty.checkbox8
                                    ),
                                    defaultChecked: (() => {
                                      try {
                                        return $state.workingFormFilter.includes(
                                          currentItem.key
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "checkbox8",
                                        __plasmic_idx_0,
                                        "checked"
                                      ]).apply(null, eventArgs);

                                      (async checked => {
                                        const $steps = {};

                                        $steps["updateWorkingFormFilter"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "workingFormFilter"
                                                  ]
                                                },
                                                operation: 0,
                                                value:
                                                  $state.workingFormFilter.includes(
                                                    currentItem.key
                                                  )
                                                    ? $state.workingFormFilter.filter(
                                                        k =>
                                                          k !== currentItem.key
                                                      )
                                                    : [
                                                        ...$state.workingFormFilter,
                                                        currentItem.key
                                                      ]
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateWorkingFormFilter"] !=
                                            null &&
                                          typeof $steps[
                                            "updateWorkingFormFilter"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateWorkingFormFilter"
                                          ].then === "function"
                                        ) {
                                          $steps["updateWorkingFormFilter"] =
                                            await $steps[
                                              "updateWorkingFormFilter"
                                            ];
                                        }
                                      }).apply(null, eventArgs);
                                    }
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "checked",
                                        plasmicStateName: "checkbox8[].checked"
                                      }
                                    ],
                                    [__plasmic_idx_0],
                                    undefined ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "checkbox8[].checked",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return $state.workingFormFilter.includes(
                                                currentItem.key
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <AntdCheckbox
                                      data-plasmic-name={"checkbox8"}
                                      data-plasmic-override={
                                        overrides.checkbox8
                                      }
                                      {...child$Props}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__l0Yh3
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.label;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "Checkbox";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </AntdCheckbox>
                                  );
                                })()}
                              </div>
                            );
                          })}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__iOsBk
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___2OZJ
                            )}
                          >
                            {"L\u1ecdc theo l\u0129nh v\u1ef1c c\u00f4ng ty"}
                          </div>
                          <Select
                            data-plasmic-name={"select13"}
                            data-plasmic-override={overrides.select13}
                            className={classNames(
                              "__wab_instance",
                              sty.select13
                            )}
                            isOpen={generateStateValueProp($state, [
                              "select13",
                              "isOpen"
                            ])}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select13",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            onOpenChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select13",
                                "isOpen"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            showLabel={false}
                            value={generateStateValueProp($state, [
                              "select13",
                              "value"
                            ])}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__b1VB7
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__d5Gdd
                            )}
                          >
                            {"L\u1ecdc theo quy m\u00f4 c\u00f4ng ty"}
                          </div>
                          <Select
                            data-plasmic-name={"select14"}
                            data-plasmic-override={overrides.select14}
                            className={classNames(
                              "__wab_instance",
                              sty.select14
                            )}
                            isOpen={generateStateValueProp($state, [
                              "select14",
                              "isOpen"
                            ])}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select14",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            onOpenChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select14",
                                "isOpen"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            showLabel={false}
                            value={generateStateValueProp($state, [
                              "select14",
                              "value"
                            ])}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rc34J
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0O7Oz
                            )}
                          >
                            {
                              "L\u1ecdc theo Lo\u1ea1i h\u00ecnh doanh nghi\u1ec7p\r"
                            }
                          </div>
                          <Select
                            data-plasmic-name={"select15"}
                            data-plasmic-override={overrides.select15}
                            className={classNames(
                              "__wab_instance",
                              sty.select15
                            )}
                            isOpen={generateStateValueProp($state, [
                              "select15",
                              "isOpen"
                            ])}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select15",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            onOpenChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select15",
                                "isOpen"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            showLabel={false}
                            value={generateStateValueProp($state, [
                              "select15",
                              "value"
                            ])}
                          />
                        </div>
                      </div>
                    }
                    heading={
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3___7VYea
                        )}
                      >
                        {"B\u1ed9 l\u1ecdc"}
                      </h3>
                    }
                    isOpen={generateStateValueProp($state, [
                      "modal3",
                      "isOpen"
                    ])}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "modal3",
                        "isOpen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    trigger={
                      <Button
                        iconStart={true}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__guyDp
                            )}
                          >
                            {"Open Modal"}
                          </div>
                        }
                        start={
                          <FilterListSvgrepoComSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__vLi2
                            )}
                            role={"img"}
                          />
                        }
                      />
                    }
                  />

                  <FilterListSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__iscQt, {
                      [sty.svgtoggleFilter__iscQtRduS9]: hasVariant(
                        $state,
                        "toggleFilter",
                        "toggleFilter"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateIsFilterOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["isFilterOpen"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateIsFilterOpen"] != null &&
                        typeof $steps["updateIsFilterOpen"] === "object" &&
                        typeof $steps["updateIsFilterOpen"].then === "function"
                      ) {
                        $steps["updateIsFilterOpen"] = await $steps[
                          "updateIsFilterOpen"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                </div>
              </div>
              <div
                data-plasmic-name={"filterTablet"}
                data-plasmic-override={overrides.filterTablet}
                className={classNames(projectcss.all, sty.filterTablet, {
                  [sty.filterTabletclosed]: hasVariant(
                    $state,
                    "closed",
                    "closed"
                  ),
                  [sty.filterTablettoggleFilter]: hasVariant(
                    $state,
                    "toggleFilter",
                    "toggleFilter"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__owCdY, {
                    [sty.freeBoxtoggleFilter__owCdYRduS9]: hasVariant(
                      $state,
                      "toggleFilter",
                      "toggleFilter"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fOdXy)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateIsFilterOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["isFilterOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateIsFilterOpen"] != null &&
                        typeof $steps["updateIsFilterOpen"] === "object" &&
                        typeof $steps["updateIsFilterOpen"].then === "function"
                      ) {
                        $steps["updateIsFilterOpen"] = await $steps[
                          "updateIsFilterOpen"
                        ];
                      }
                    }}
                  >
                    <CloseFilter
                      data-plasmic-name={"closeFilter"}
                      data-plasmic-override={overrides.closeFilter}
                      className={classNames("__wab_instance", sty.closeFilter)}
                    />
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___9C0IP, {
                    [sty.freeBoxtoggleFilter___9C0IPRduS9]: hasVariant(
                      $state,
                      "toggleFilter",
                      "toggleFilter"
                    )
                  })}
                >
                  <div
                    data-plasmic-name={"experienceFilterTablet"}
                    data-plasmic-override={overrides.experienceFilterTablet}
                    className={classNames(
                      projectcss.all,
                      sty.experienceFilterTablet
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0Uqin
                      )}
                    >
                      {"L\u1ecdc theo Kinh nghi\u1ec7m l\u00e0m vi\u1ec7c\r"}
                    </div>
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return [
                            {
                              key: 22,
                              label: "Không có"
                            },
                            {
                              key: 23,
                              label: "Dưới 1 năm"
                            },
                            {
                              key: 24,
                              label: "Từ 1 - 2 năm"
                            },
                            {
                              key: 31,
                              label: "Từ 2 - 5 năm"
                            },
                            {
                              key: 32,
                              label: "Trên 5 năm"
                            }
                          ];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0PR6B
                          )}
                          key={currentIndex}
                        >
                          {(() => {
                            const child$Props = {
                              checked: generateStateValueProp($state, [
                                "checkbox",
                                __plasmic_idx_0,
                                "checked"
                              ]),
                              className: classNames(
                                "__wab_instance",
                                sty.checkbox
                              ),
                              defaultChecked: (() => {
                                try {
                                  return $state.experienceFilter.includes(
                                    currentItem.key
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "checkbox",
                                  __plasmic_idx_0,
                                  "checked"
                                ]).apply(null, eventArgs);

                                (async checked => {
                                  const $steps = {};

                                  $steps["updateExperienceFilter"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["experienceFilter"]
                                          },
                                          operation: 0,
                                          value:
                                            $state.experienceFilter.includes(
                                              currentItem.key
                                            )
                                              ? $state.experienceFilter.filter(
                                                  k => k !== currentItem.key
                                                )
                                              : [
                                                  ...$state.experienceFilter,
                                                  currentItem.key
                                                ]
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateExperienceFilter"] != null &&
                                    typeof $steps["updateExperienceFilter"] ===
                                      "object" &&
                                    typeof $steps["updateExperienceFilter"]
                                      .then === "function"
                                  ) {
                                    $steps["updateExperienceFilter"] =
                                      await $steps["updateExperienceFilter"];
                                  }
                                }).apply(null, eventArgs);
                              }
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "checked",
                                  plasmicStateName: "checkbox[].checked"
                                }
                              ],
                              [__plasmic_idx_0],
                              undefined ?? {},
                              child$Props
                            );
                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "checkbox[].checked",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return $state.experienceFilter.includes(
                                          currentItem.key
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <AntdCheckbox
                                data-plasmic-name={"checkbox"}
                                data-plasmic-override={overrides.checkbox}
                                {...child$Props}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__a5RiM
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.label;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Checkbox";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </AntdCheckbox>
                            );
                          })()}
                        </div>
                      );
                    })}
                  </div>
                  <div
                    data-plasmic-name={"salaryFilterTablet"}
                    data-plasmic-override={overrides.salaryFilterTablet}
                    className={classNames(
                      projectcss.all,
                      sty.salaryFilterTablet
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ed836
                      )}
                    >
                      {"L\u1ecdc theo M\u1ee9c l\u01b0\u01a1ng\r"}
                    </div>
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return [
                            {
                              key: "12",
                              label: "Từ 5 đến 10 triệu"
                            },
                            {
                              key: "11",
                              label: "Dưới 5 triệu"
                            },
                            {
                              key: "13",
                              label: "Từ 10 đến 20 triệu"
                            },
                            {
                              key: "2020",
                              label: "Từ 20 đến 50 triệu"
                            },
                            {
                              key: "2021",
                              label: "Trên 50 triệu"
                            }
                          ];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__iyojg
                          )}
                          key={currentIndex}
                        >
                          {(() => {
                            const child$Props = {
                              checked: generateStateValueProp($state, [
                                "checkbox3",
                                __plasmic_idx_0,
                                "checked"
                              ]),
                              className: classNames(
                                "__wab_instance",
                                sty.checkbox3
                              ),
                              defaultChecked: (() => {
                                try {
                                  return $state.salaryFilter.includes(
                                    currentItem.key
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "checkbox3",
                                  __plasmic_idx_0,
                                  "checked"
                                ]).apply(null, eventArgs);

                                (async checked => {
                                  const $steps = {};

                                  $steps["updateSalaryFilter"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["salaryFilter"]
                                          },
                                          operation: 0,
                                          value: $state.salaryFilter.includes(
                                            currentItem.key
                                          )
                                            ? $state.salaryFilter.filter(
                                                k => k !== currentItem.key
                                              )
                                            : [
                                                ...$state.salaryFilter,
                                                currentItem.key
                                              ]
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateSalaryFilter"] != null &&
                                    typeof $steps["updateSalaryFilter"] ===
                                      "object" &&
                                    typeof $steps["updateSalaryFilter"].then ===
                                      "function"
                                  ) {
                                    $steps["updateSalaryFilter"] = await $steps[
                                      "updateSalaryFilter"
                                    ];
                                  }
                                }).apply(null, eventArgs);
                              }
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "checked",
                                  plasmicStateName: "checkbox3[].checked"
                                }
                              ],
                              [__plasmic_idx_0],
                              undefined ?? {},
                              child$Props
                            );
                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "checkbox3[].checked",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return $state.salaryFilter.includes(
                                          currentItem.key
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <AntdCheckbox
                                data-plasmic-name={"checkbox3"}
                                data-plasmic-override={overrides.checkbox3}
                                {...child$Props}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__obGfb
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.label;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Checkbox";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </AntdCheckbox>
                            );
                          })()}
                        </div>
                      );
                    })}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__d5B3S)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__i8FHc)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5MFXm
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__em3Fp
                        )}
                      >
                        {
                          "L\u1ecdc theo H\u00ecnh th\u1ee9c l\u00e0m vi\u1ec7c\r"
                        }
                      </div>
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return [
                              {
                                key: "29",
                                label: "Toàn thời gian"
                              },
                              {
                                key: "30",
                                label: "Bán thời gian"
                              }
                            ];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__oTOg
                            )}
                            key={currentIndex}
                          >
                            {(() => {
                              const child$Props = {
                                checked: generateStateValueProp($state, [
                                  "checkbox4",
                                  __plasmic_idx_0,
                                  "checked"
                                ]),
                                className: classNames(
                                  "__wab_instance",
                                  sty.checkbox4
                                ),
                                defaultChecked: (() => {
                                  try {
                                    return $state.workingFormFilter.includes(
                                      currentItem.key
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "checkbox4",
                                    __plasmic_idx_0,
                                    "checked"
                                  ]).apply(null, eventArgs);

                                  (async checked => {
                                    const $steps = {};

                                    $steps["updateWorkingFormFilter"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "workingFormFilter"
                                              ]
                                            },
                                            operation: 0,
                                            value:
                                              $state.workingFormFilter.includes(
                                                currentItem.key
                                              )
                                                ? $state.workingFormFilter.filter(
                                                    k => k !== currentItem.key
                                                  )
                                                : [
                                                    ...$state.workingFormFilter,
                                                    currentItem.key
                                                  ]
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateWorkingFormFilter"] !=
                                        null &&
                                      typeof $steps[
                                        "updateWorkingFormFilter"
                                      ] === "object" &&
                                      typeof $steps["updateWorkingFormFilter"]
                                        .then === "function"
                                    ) {
                                      $steps["updateWorkingFormFilter"] =
                                        await $steps["updateWorkingFormFilter"];
                                    }
                                  }).apply(null, eventArgs);
                                }
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "checked",
                                    plasmicStateName: "checkbox4[].checked"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "checkbox4[].checked",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      (() => {
                                        try {
                                          return $state.workingFormFilter.includes(
                                            currentItem.key
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdCheckbox
                                  data-plasmic-name={"checkbox4"}
                                  data-plasmic-override={overrides.checkbox4}
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__wGfWf
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.label;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Checkbox";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </AntdCheckbox>
                              );
                            })()}
                          </div>
                        );
                      })}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cWeNb)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5505Q
                        )}
                      >
                        {"L\u1ecdc theo l\u0129nh v\u1ef1c c\u00f4ng ty"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bDw3C
                        )}
                      >
                        <Select
                          data-plasmic-name={"select"}
                          data-plasmic-override={overrides.select}
                          className={classNames("__wab_instance", sty.select)}
                          isOpen={generateStateValueProp($state, [
                            "select",
                            "isOpen"
                          ])}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onOpenChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select",
                              "isOpen"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          showLabel={false}
                          value={generateStateValueProp($state, [
                            "select",
                            "value"
                          ])}
                        />
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pSbjs)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kXna3)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vzge
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wLlg
                          )}
                        >
                          {"L\u1ecdc theo l\u0129nh v\u1ef1c c\u00f4ng ty"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__roHoR
                          )}
                        >
                          <Select
                            data-plasmic-name={"select9"}
                            data-plasmic-override={overrides.select9}
                            className={classNames(
                              "__wab_instance",
                              sty.select9
                            )}
                            isOpen={generateStateValueProp($state, [
                              "select9",
                              "isOpen"
                            ])}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select9",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            onOpenChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select9",
                                "isOpen"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            showLabel={false}
                            value={generateStateValueProp($state, [
                              "select9",
                              "value"
                            ])}
                          />
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ntTaO
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__g3YmC
                          )}
                        >
                          {"L\u1ecdc theo lo\u1ea1i h\u00ecnh DN"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gp2LO
                          )}
                        >
                          <Select
                            data-plasmic-name={"select10"}
                            data-plasmic-override={overrides.select10}
                            className={classNames(
                              "__wab_instance",
                              sty.select10
                            )}
                            isOpen={generateStateValueProp($state, [
                              "select10",
                              "isOpen"
                            ])}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select10",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            onOpenChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select10",
                                "isOpen"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            showLabel={false}
                            value={generateStateValueProp($state, [
                              "select10",
                              "value"
                            ])}
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"searchContent"}
              data-plasmic-override={overrides.searchContent}
              className={classNames(projectcss.all, sty.searchContent)}
            >
              <div
                data-plasmic-name={"filterLaptop"}
                data-plasmic-override={overrides.filterLaptop}
                className={classNames(projectcss.all, sty.filterLaptop)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__nKv9B, {
                    [sty.freeBoxtoggleFilter__nKv9BRduS9]: hasVariant(
                      $state,
                      "toggleFilter",
                      "toggleFilter"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__o82P1
                    )}
                  >
                    {"L\u1ecdc theo Kinh nghi\u1ec7m l\u00e0m vi\u1ec7c\r"}
                  </div>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [
                          {
                            key: 22,
                            label: "Không có"
                          },
                          {
                            key: 23,
                            label: "Dưới 1 năm"
                          },
                          {
                            key: 24,
                            label: "Từ 1 - 2 năm"
                          },
                          {
                            key: 31,
                            label: "Từ 2 - 5 năm"
                          },
                          {
                            key: 32,
                            label: "Trên 5 năm"
                          }
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (() => {
                      const child$Props = {
                        checked: generateStateValueProp($state, [
                          "experience",
                          __plasmic_idx_0,
                          "checked"
                        ]),
                        className: classNames("__wab_instance", sty.experience),
                        defaultChecked: (() => {
                          try {
                            return $state.experienceFilter.includes(
                              currentItem.key
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        key: currentIndex,
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "experience",
                            __plasmic_idx_0,
                            "checked"
                          ]).apply(null, eventArgs);

                          (async checked => {
                            const $steps = {};

                            $steps["updateExperienceFilter"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["experienceFilter"]
                                    },
                                    operation: 0,
                                    value: $state.experienceFilter.includes(
                                      currentItem.key
                                    )
                                      ? $state.experienceFilter.filter(
                                          k => k !== currentItem.key
                                        )
                                      : [
                                          ...$state.experienceFilter,
                                          currentItem.key
                                        ]
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateExperienceFilter"] != null &&
                              typeof $steps["updateExperienceFilter"] ===
                                "object" &&
                              typeof $steps["updateExperienceFilter"].then ===
                                "function"
                            ) {
                              $steps["updateExperienceFilter"] = await $steps[
                                "updateExperienceFilter"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "checked",
                            plasmicStateName: "experience[].checked"
                          }
                        ],
                        [__plasmic_idx_0],
                        undefined ?? {},
                        child$Props
                      );
                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "experience[].checked",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return $state.experienceFilter.includes(
                                    currentItem.key
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                          }
                        ],
                        [__plasmic_idx_0]
                      );
                      return (
                        <AntdCheckbox
                          data-plasmic-name={"experience"}
                          data-plasmic-override={overrides.experience}
                          {...child$Props}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__erF9M
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.label;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Checkbox";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </AntdCheckbox>
                      );
                    })();
                  })}
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [
                          {
                            key: "22",
                            label: "Không có"
                          },
                          {
                            key: "23",
                            label: "Dưới 1 năm"
                          },
                          {
                            key: "24",
                            label: "Từ 1 - 2 năm"
                          },
                          {
                            key: "31",
                            label: "Từ 2 - 5 năm"
                          },
                          {
                            key: "32",
                            label: "Trên 5 năm"
                          }
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__eSgkt
                        )}
                        key={currentIndex}
                      />
                    );
                  })}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__rKqhF)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hbUH
                    )}
                  >
                    {"L\u1ecdc theo M\u1ee9c l\u01b0\u01a1ng\r"}
                  </div>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [
                          {
                            key: "12",
                            label: "Từ 5 đến 10 triệu"
                          },
                          {
                            key: "11",
                            label: "Dưới 5 triệu"
                          },
                          {
                            key: "13",
                            label: "Từ 10 đến 20 triệu"
                          },
                          {
                            key: "2020",
                            label: "Từ 20 đến 50 triệu"
                          },
                          {
                            key: "2021",
                            label: "Trên 50 triệu"
                          }
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const salaryItem = __plasmic_item_0;
                    const salaryIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__b9J4L
                        )}
                        key={salaryIndex}
                      >
                        {(() => {
                          const child$Props = {
                            checked: generateStateValueProp($state, [
                              "checkbox2",
                              __plasmic_idx_0,
                              "checked"
                            ]),
                            className: classNames(
                              "__wab_instance",
                              sty.checkbox2
                            ),
                            defaultChecked: hasVariant(
                              globalVariants,
                              "screen",
                              "tabletOnly"
                            )
                              ? (() => {
                                  try {
                                    return $state.salaryFilter.includes(
                                      salaryItem.key
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              : (() => {
                                  try {
                                    return $state.salaryFilter.includes(
                                      salaryItem.key
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "checkbox2",
                                __plasmic_idx_0,
                                "checked"
                              ]).apply(null, eventArgs);

                              (async checked => {
                                const $steps = {};

                                $steps["updateSalaryFilter"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["salaryFilter"]
                                        },
                                        operation: 0,
                                        value: $state.salaryFilter.includes(
                                          salaryItem.key
                                        )
                                          ? $state.salaryFilter.filter(
                                              k => k !== salaryItem.key
                                            )
                                          : [
                                              ...$state.salaryFilter,
                                              salaryItem.key
                                            ]
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateSalaryFilter"] != null &&
                                  typeof $steps["updateSalaryFilter"] ===
                                    "object" &&
                                  typeof $steps["updateSalaryFilter"].then ===
                                    "function"
                                ) {
                                  $steps["updateSalaryFilter"] = await $steps[
                                    "updateSalaryFilter"
                                  ];
                                }
                              }).apply(null, eventArgs);
                            }
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "checked",
                                plasmicStateName: "checkbox2[].checked"
                              }
                            ],
                            [__plasmic_idx_0],
                            undefined ?? {},
                            child$Props
                          );
                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "checkbox2[].checked",
                                initFunc: ({ $props, $state, $queries }) =>
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletOnly"
                                  )
                                    ? (() => {
                                        try {
                                          return $state.salaryFilter.includes(
                                            salaryItem.key
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    : (() => {
                                        try {
                                          return $state.salaryFilter.includes(
                                            salaryItem.key
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <AntdCheckbox
                              data-plasmic-name={"checkbox2"}
                              data-plasmic-override={overrides.checkbox2}
                              {...child$Props}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__pjWch
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return salaryItem.label;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Checkbox";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </AntdCheckbox>
                          );
                        })()}
                      </div>
                    );
                  })}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__rh2R8)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4Ggsg
                    )}
                  >
                    {"L\u1ecdc theo H\u00ecnh th\u1ee9c l\u00e0m vi\u1ec7c\r"}
                  </div>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [
                          {
                            key: "29",
                            label: "Toàn thời gian"
                          },
                          {
                            key: "30",
                            label: "Bán thời gian"
                          }
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wbNuy
                        )}
                        key={currentIndex}
                      >
                        {(() => {
                          const child$Props = {
                            checked: generateStateValueProp($state, [
                              "hinhThucLamViecFilter",
                              __plasmic_idx_0,
                              "checked"
                            ]),
                            className: classNames(
                              "__wab_instance",
                              sty.hinhThucLamViecFilter
                            ),
                            defaultChecked: (() => {
                              try {
                                return $state.workingFormFilter.includes(
                                  currentItem.key
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "hinhThucLamViecFilter",
                                __plasmic_idx_0,
                                "checked"
                              ]).apply(null, eventArgs);

                              (async checked => {
                                const $steps = {};

                                $steps["updateWorkingFormFilter"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["workingFormFilter"]
                                        },
                                        operation: 0,
                                        value:
                                          $state.workingFormFilter.includes(
                                            currentItem.key
                                          )
                                            ? $state.workingFormFilter.filter(
                                                k => k !== currentItem.key
                                              )
                                            : [
                                                ...$state.workingFormFilter,
                                                currentItem.key
                                              ]
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateWorkingFormFilter"] != null &&
                                  typeof $steps["updateWorkingFormFilter"] ===
                                    "object" &&
                                  typeof $steps["updateWorkingFormFilter"]
                                    .then === "function"
                                ) {
                                  $steps["updateWorkingFormFilter"] =
                                    await $steps["updateWorkingFormFilter"];
                                }
                              }).apply(null, eventArgs);
                            }
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "checked",
                                plasmicStateName:
                                  "hinhThucLamViecFilter[].checked"
                              }
                            ],
                            [__plasmic_idx_0],
                            undefined ?? {},
                            child$Props
                          );
                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "hinhThucLamViecFilter[].checked",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return $state.workingFormFilter.includes(
                                        currentItem.key
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <AntdCheckbox
                              data-plasmic-name={"hinhThucLamViecFilter"}
                              data-plasmic-override={
                                overrides.hinhThucLamViecFilter
                              }
                              {...child$Props}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__pOxwa
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.label;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Checkbox";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </AntdCheckbox>
                          );
                        })()}
                      </div>
                    );
                  })}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__pQxUw)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8FigY
                    )}
                  >
                    {"L\u1ecdc theo l\u0129nh v\u1ef1c c\u00f4ng ty"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___9QHtW)}
                  >
                    <Select
                      data-plasmic-name={"select6"}
                      data-plasmic-override={overrides.select6}
                      className={classNames("__wab_instance", sty.select6)}
                      isOpen={generateStateValueProp($state, [
                        "select6",
                        "isOpen"
                      ])}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select6",
                          "value"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select6",
                          "isOpen"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      showLabel={false}
                      value={generateStateValueProp($state, [
                        "select6",
                        "value"
                      ])}
                    />
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__jZxkb)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__s16Lt
                    )}
                  >
                    {"L\u1ecdc theo quy m\u00f4 c\u00f4ng ty"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ppA6V)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qHiP)}
                    >
                      <Select
                        data-plasmic-name={"select7"}
                        data-plasmic-override={overrides.select7}
                        className={classNames("__wab_instance", sty.select7)}
                        isOpen={generateStateValueProp($state, [
                          "select7",
                          "isOpen"
                        ])}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "select7",
                            "value"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onOpenChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "select7",
                            "isOpen"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        showLabel={false}
                        value={generateStateValueProp($state, [
                          "select7",
                          "value"
                        ])}
                      />

                      <AntdOptionGroup
                        data-plasmic-name={"optionGroup"}
                        data-plasmic-override={overrides.optionGroup}
                        className={classNames(
                          "__wab_instance",
                          sty.optionGroup
                        )}
                        label={"Group label"}
                      >
                        <AntdOption
                          className={classNames(
                            "__wab_instance",
                            sty.option__cmbni
                          )}
                          value={"option1"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dklV
                            )}
                          >
                            {"Option 1"}
                          </div>
                        </AntdOption>
                        <AntdOption
                          className={classNames(
                            "__wab_instance",
                            sty.option__nm7Np
                          )}
                          value={"option2"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___71Xlv
                            )}
                          >
                            {"Option 1"}
                          </div>
                        </AntdOption>
                      </AntdOptionGroup>
                    </div>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___85Anf)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xtD5G
                    )}
                  >
                    {"L\u1ecdc theo lo\u1ea1i h\u00ecnh DN"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kswJk)}
                  >
                    <Select
                      data-plasmic-name={"select8"}
                      data-plasmic-override={overrides.select8}
                      className={classNames("__wab_instance", sty.select8)}
                      isOpen={generateStateValueProp($state, [
                        "select8",
                        "isOpen"
                      ])}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select8",
                          "value"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select8",
                          "isOpen"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      showLabel={false}
                      value={generateStateValueProp($state, [
                        "select8",
                        "value"
                      ])}
                    />
                  </div>
                </div>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__sfQiv, {
                  [sty.freeBoxtoggleFilter__sfQivRduS9]: hasVariant(
                    $state,
                    "toggleFilter",
                    "toggleFilter"
                  )
                })}
              >
                <DataFetcher
                  body={(() => {
                    try {
                      return {
                        path: [],
                        params: [
                          {
                            key: "window.localStorage?.access_token"
                          },
                          {
                            key: "listJob.pageNo",
                            value: $state.page
                          },
                          {
                            key: "keyword.value.trim()",
                            value:
                              $state.searchInput.value || $ctx.query.keyword
                          },
                          {
                            key: "provinces.value.length == 0 ? null : provinces.value.map(Number)",
                            value: null
                          },
                          {
                            key: "nganhNghe.value.length == 0 ? null : nganhNghe.value.map(Number)",
                            value: null
                          },
                          {
                            key: "chucVu.value.length == 0 ? null : chucVu.value.map(Number)",
                            value: null
                          },
                          {
                            key: "linhVuc.value.length == 0 ? null : linhVuc.value.map(Number)",
                            value: null
                          },
                          {
                            key: "kinhNghiem.value.length == 0 ? null : kinhNghiem.value.map(Number)",
                            value:
                              $state.experienceFilter.length === 0
                                ? null
                                : $state.experienceFilter
                          },
                          {
                            key: "mucLuong.value.length == 0 ? null : mucLuong.value.map(Number)",
                            value:
                              $state.salaryFilter.length === 0
                                ? null
                                : $state.salaryFilter
                          },
                          {
                            key: "hinhThucLamViec.value.length == 0 ? null : hinhThucLamViec.value.map(Number)",
                            value:
                              $state.workingFormFilter.length === 0
                                ? null
                                : $state.workingFormFilter
                          },
                          {
                            key: "quyMoCT.value.length == 0 ? null : quyMoCT.value.map(Number)",
                            value: null
                          },
                          {
                            key: "loaiHinhDN.value.length == 0 ? null : loaiHinhDN.value.map(Number)",
                            value: null
                          },
                          {
                            key: "getUserInfo.data?.data?.id ?? null",
                            value: null
                          }
                        ],

                        viewMode: true,
                        applicationId: "6847dda4cceeff07d3563162",
                        queryId: "75vndwoik6hnh8dn2pla7vz8"
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  className={classNames(
                    "__wab_instance",
                    sty.httpRestApiFetcher__aeze0
                  )}
                  dataName={"fetchedDatahahaa"}
                  errorDisplay={
                    <DataCtxReader__>
                      {$ctx => "Error fetching data"}
                    </DataCtxReader__>
                  }
                  errorName={"fetchErrorhahaa"}
                  loadingDisplay={
                    <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
                  }
                  method={"POST"}
                  noLayout={false}
                  previewSpinner={false}
                  url={"https://vieclam.gov.vn/api/query/execute"}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <React.Fragment>
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $ctx.fetchedDatahahaa.data.data;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const dataItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <SeachJobComponent
                              data-plasmic-name={"seachJobComponent"}
                              data-plasmic-override={
                                overrides.seachJobComponent
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.seachJobComponent
                              )}
                              experience={(() => {
                                try {
                                  return dataItem.kinh_nghiem_lv;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              id={(() => {
                                try {
                                  return dataItem.id;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              key={currentIndex}
                              numberOfPeople={(() => {
                                try {
                                  return dataItem.so_luong + " người";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              province={(() => {
                                try {
                                  return dataItem.ten_tinh1;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              title={(() => {
                                try {
                                  return dataItem.vitri_td;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          );
                        })}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qt3YD,
                            {
                              [sty.texttoggleFilter__qt3YDRduS9]: hasVariant(
                                $state,
                                "toggleFilter",
                                "toggleFilter"
                              )
                            }
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return ($state.totalItem =
                                  $ctx.fetchedDatahahaa.data.pagination.total_items);
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        {(() => {
                          try {
                            return $ctx.fetchedDatahahaa.data.data.length === 0
                              ? true
                              : false;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            data-plasmic-name={"noDataInterface"}
                            data-plasmic-override={overrides.noDataInterface}
                            className={classNames(
                              projectcss.all,
                              sty.noDataInterface
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__nj6Gk, {
                                [sty.imgtoggleFilter__nj6GkRduS9]: hasVariant(
                                  $state,
                                  "toggleFilter",
                                  "toggleFilter"
                                )
                              })}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/copy_of_vnpt_composable_platform/images/frame7Svg.svg",
                                fullWidth: 136,
                                fullHeight: 126,
                                aspectRatio: undefined
                              }}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rbCr3
                              )}
                            >
                              {"Kh\u00f4ng c\u00f3 d\u1eef li\u1ec7u"}
                            </div>
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return $ctx.fetchedDatahahaa.data.data.length === 0
                              ? false
                              : true;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__z4Oex
                            )}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.pagination
                                ),
                                current: generateStateValueProp($state, [
                                  "pagination",
                                  "currentPage"
                                ]),
                                defaultCurrent: (() => {
                                  try {
                                    return $state.page;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return 2;
                                    }
                                    throw e;
                                  }
                                })(),
                                defaultPageSize: 10,
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "currentPage",
                                    ["pagination", "currentPage"],
                                    AntdPagination_Helpers
                                  ).apply(null, eventArgs);
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "startIndex",
                                    ["pagination", "startIndex"],
                                    AntdPagination_Helpers
                                  ).apply(null, eventArgs);
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "endIndex",
                                    ["pagination", "endIndex"],
                                    AntdPagination_Helpers
                                  ).apply(null, eventArgs);

                                  (async (page, pageSize) => {
                                    const $steps = {};

                                    $steps["updatePage"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["page"]
                                            },
                                            operation: 0,
                                            value: (() => {
                                              return ($state.page =
                                                $state.page);
                                            })()
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updatePage"] != null &&
                                      typeof $steps["updatePage"] ===
                                        "object" &&
                                      typeof $steps["updatePage"].then ===
                                        "function"
                                    ) {
                                      $steps["updatePage"] = await $steps[
                                        "updatePage"
                                      ];
                                    }
                                  }).apply(null, eventArgs);
                                },
                                onShowSizeChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "pageSize",
                                    ["pagination", "pageSize"],
                                    AntdPagination_Helpers
                                  ).apply(null, eventArgs);
                                },
                                pageSize: generateStateValueProp($state, [
                                  "pagination",
                                  "pageSize"
                                ]),
                                pageSizeOptions: [
                                  { pageSize: 10 },
                                  { pageSize: 20 },
                                  { pageSize: 50 },
                                  { pageSize: 100 }
                                ],
                                showSizeChanger: true,
                                size: "default",
                                total: (() => {
                                  try {
                                    return $ctx.fetchedDatahahaa.data.pagination
                                      .total_items;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return 20;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "currentPage",
                                    plasmicStateName: "pagination.currentPage"
                                  },
                                  {
                                    name: "pageSize",
                                    plasmicStateName: "pagination.pageSize"
                                  },
                                  {
                                    name: "startIndex",
                                    plasmicStateName: "pagination.startIndex"
                                  },
                                  {
                                    name: "endIndex",
                                    plasmicStateName: "pagination.endIndex"
                                  }
                                ],
                                [],
                                AntdPagination_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdPagination
                                  data-plasmic-name={"pagination"}
                                  data-plasmic-override={overrides.pagination}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </div>
                        ) : null}
                      </React.Fragment>
                    )}
                  </DataCtxReader__>
                </DataFetcher>
              </div>
            </div>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer, {
              [sty.footertoggleFilter]: hasVariant(
                $state,
                "toggleFilter",
                "toggleFilter"
              )
            })}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerBar",
    "logo",
    "overlay",
    "nhaTd",
    "menuSidebar",
    "breadcrumb",
    "searchBar",
    "searchInput",
    "modal",
    "checkbox5",
    "provinceSearch",
    "menuItem",
    "select2",
    "select3",
    "select4",
    "select11",
    "select12",
    "modal2",
    "h4",
    "radioGroup",
    "select5",
    "modal3",
    "checkbox6",
    "checkbox7",
    "checkbox8",
    "select13",
    "select14",
    "select15",
    "filterTablet",
    "closeFilter",
    "experienceFilterTablet",
    "checkbox",
    "salaryFilterTablet",
    "checkbox3",
    "checkbox4",
    "select",
    "select9",
    "select10",
    "searchContent",
    "filterLaptop",
    "experience",
    "checkbox2",
    "hinhThucLamViecFilter",
    "select6",
    "select7",
    "optionGroup",
    "select8",
    "seachJobComponent",
    "noDataInterface",
    "pagination",
    "footer"
  ],
  headerBar: ["headerBar", "logo", "overlay", "nhaTd"],
  logo: ["logo", "overlay"],
  overlay: ["overlay"],
  nhaTd: ["nhaTd"],
  menuSidebar: ["menuSidebar"],
  breadcrumb: ["breadcrumb"],
  searchBar: [
    "searchBar",
    "searchInput",
    "modal",
    "checkbox5",
    "provinceSearch",
    "menuItem"
  ],
  searchInput: ["searchInput"],
  modal: ["modal", "checkbox5"],
  checkbox5: ["checkbox5"],
  provinceSearch: ["provinceSearch", "menuItem"],
  menuItem: ["menuItem"],
  select2: ["select2"],
  select3: ["select3"],
  select4: ["select4"],
  select11: ["select11"],
  select12: ["select12"],
  modal2: ["modal2", "h4", "radioGroup"],
  h4: ["h4"],
  radioGroup: ["radioGroup"],
  select5: ["select5"],
  modal3: [
    "modal3",
    "checkbox6",
    "checkbox7",
    "checkbox8",
    "select13",
    "select14",
    "select15"
  ],
  checkbox6: ["checkbox6"],
  checkbox7: ["checkbox7"],
  checkbox8: ["checkbox8"],
  select13: ["select13"],
  select14: ["select14"],
  select15: ["select15"],
  filterTablet: [
    "filterTablet",
    "closeFilter",
    "experienceFilterTablet",
    "checkbox",
    "salaryFilterTablet",
    "checkbox3",
    "checkbox4",
    "select",
    "select9",
    "select10"
  ],
  closeFilter: ["closeFilter"],
  experienceFilterTablet: ["experienceFilterTablet", "checkbox"],
  checkbox: ["checkbox"],
  salaryFilterTablet: ["salaryFilterTablet", "checkbox3"],
  checkbox3: ["checkbox3"],
  checkbox4: ["checkbox4"],
  select: ["select"],
  select9: ["select9"],
  select10: ["select10"],
  searchContent: [
    "searchContent",
    "filterLaptop",
    "experience",
    "checkbox2",
    "hinhThucLamViecFilter",
    "select6",
    "select7",
    "optionGroup",
    "select8",
    "seachJobComponent",
    "noDataInterface",
    "pagination"
  ],
  filterLaptop: [
    "filterLaptop",
    "experience",
    "checkbox2",
    "hinhThucLamViecFilter",
    "select6",
    "select7",
    "optionGroup",
    "select8"
  ],
  experience: ["experience"],
  checkbox2: ["checkbox2"],
  hinhThucLamViecFilter: ["hinhThucLamViecFilter"],
  select6: ["select6"],
  select7: ["select7"],
  optionGroup: ["optionGroup"],
  select8: ["select8"],
  seachJobComponent: ["seachJobComponent"],
  noDataInterface: ["noDataInterface"],
  pagination: ["pagination"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerBar: "div";
  logo: "div";
  overlay: "div";
  nhaTd: typeof NhaTd;
  menuSidebar: "div";
  breadcrumb: typeof AntdBreadcrumb;
  searchBar: "div";
  searchInput: typeof TextInput;
  modal: typeof Modal;
  checkbox5: typeof AntdCheckbox;
  provinceSearch: typeof Select;
  menuItem: typeof MenuItem;
  select2: typeof Select;
  select3: typeof Select;
  select4: typeof Select;
  select11: typeof Select;
  select12: typeof Select;
  modal2: typeof Modal;
  h4: "h4";
  radioGroup: typeof AntdRadioGroup;
  select5: typeof Select;
  modal3: typeof Modal;
  checkbox6: typeof AntdCheckbox;
  checkbox7: typeof AntdCheckbox;
  checkbox8: typeof AntdCheckbox;
  select13: typeof Select;
  select14: typeof Select;
  select15: typeof Select;
  filterTablet: "div";
  closeFilter: typeof CloseFilter;
  experienceFilterTablet: "div";
  checkbox: typeof AntdCheckbox;
  salaryFilterTablet: "div";
  checkbox3: typeof AntdCheckbox;
  checkbox4: typeof AntdCheckbox;
  select: typeof Select;
  select9: typeof Select;
  select10: typeof Select;
  searchContent: "div";
  filterLaptop: "div";
  experience: typeof AntdCheckbox;
  checkbox2: typeof AntdCheckbox;
  hinhThucLamViecFilter: typeof AntdCheckbox;
  select6: typeof Select;
  select7: typeof Select;
  optionGroup: typeof AntdOptionGroup;
  select8: typeof Select;
  seachJobComponent: typeof SeachJobComponent;
  noDataInterface: "div";
  pagination: typeof AntdPagination;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSearchPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSearchPage__VariantsArgs;
    args?: PlasmicSearchPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSearchPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSearchPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSearchPage__ArgProps,
          internalVariantPropNames: PlasmicSearchPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSearchPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSearchPage";
  } else {
    func.displayName = `PlasmicSearchPage.${nodeName}`;
  }
  return func;
}

export const PlasmicSearchPage = Object.assign(
  // Top-level PlasmicSearchPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerBar: makeNodeComponent("headerBar"),
    logo: makeNodeComponent("logo"),
    overlay: makeNodeComponent("overlay"),
    nhaTd: makeNodeComponent("nhaTd"),
    menuSidebar: makeNodeComponent("menuSidebar"),
    breadcrumb: makeNodeComponent("breadcrumb"),
    searchBar: makeNodeComponent("searchBar"),
    searchInput: makeNodeComponent("searchInput"),
    modal: makeNodeComponent("modal"),
    checkbox5: makeNodeComponent("checkbox5"),
    provinceSearch: makeNodeComponent("provinceSearch"),
    menuItem: makeNodeComponent("menuItem"),
    select2: makeNodeComponent("select2"),
    select3: makeNodeComponent("select3"),
    select4: makeNodeComponent("select4"),
    select11: makeNodeComponent("select11"),
    select12: makeNodeComponent("select12"),
    modal2: makeNodeComponent("modal2"),
    h4: makeNodeComponent("h4"),
    radioGroup: makeNodeComponent("radioGroup"),
    select5: makeNodeComponent("select5"),
    modal3: makeNodeComponent("modal3"),
    checkbox6: makeNodeComponent("checkbox6"),
    checkbox7: makeNodeComponent("checkbox7"),
    checkbox8: makeNodeComponent("checkbox8"),
    select13: makeNodeComponent("select13"),
    select14: makeNodeComponent("select14"),
    select15: makeNodeComponent("select15"),
    filterTablet: makeNodeComponent("filterTablet"),
    closeFilter: makeNodeComponent("closeFilter"),
    experienceFilterTablet: makeNodeComponent("experienceFilterTablet"),
    checkbox: makeNodeComponent("checkbox"),
    salaryFilterTablet: makeNodeComponent("salaryFilterTablet"),
    checkbox3: makeNodeComponent("checkbox3"),
    checkbox4: makeNodeComponent("checkbox4"),
    select: makeNodeComponent("select"),
    select9: makeNodeComponent("select9"),
    select10: makeNodeComponent("select10"),
    searchContent: makeNodeComponent("searchContent"),
    filterLaptop: makeNodeComponent("filterLaptop"),
    experience: makeNodeComponent("experience"),
    checkbox2: makeNodeComponent("checkbox2"),
    hinhThucLamViecFilter: makeNodeComponent("hinhThucLamViecFilter"),
    select6: makeNodeComponent("select6"),
    select7: makeNodeComponent("select7"),
    optionGroup: makeNodeComponent("optionGroup"),
    select8: makeNodeComponent("select8"),
    seachJobComponent: makeNodeComponent("seachJobComponent"),
    noDataInterface: makeNodeComponent("noDataInterface"),
    pagination: makeNodeComponent("pagination"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicSearchPage
    internalVariantProps: PlasmicSearchPage__VariantProps,
    internalArgProps: PlasmicSearchPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Sàn việc làm",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSearchPage;
/* prettier-ignore-end */
