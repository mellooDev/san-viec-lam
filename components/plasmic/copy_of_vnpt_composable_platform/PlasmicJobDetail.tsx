/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9EC4CuzhysbPvP3VCVkLZh
// Component: PgVvD4rbt_MH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NhaTd from "../../NhaTd"; // plasmic-import: oY2WxEuoZMYU/component
import Button from "../../Button"; // plasmic-import: 8b0EpCKEWBCK/component
import { AntdBreadcrumb } from "@plasmicpkgs/antd5/skinny/registerBreadcrumb";
import { AntdBreadcrumbItem } from "@plasmicpkgs/antd5/skinny/registerBreadcrumb";
import TextInput from "../../TextInput"; // plasmic-import: -hxqxS1L-JW_/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import Modal from "../../Modal"; // plasmic-import: qt9kMpGR1rs_/component
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";
import Select from "../../Select"; // plasmic-import: Q9DPvojwXDcb/component
import MenuItem from "../../MenuItem"; // plasmic-import: 8zjSwXU6lca-/component
import MenuSection from "../../MenuSection"; // plasmic-import: WCcSKtjDwRef/component
import JobInfoItem from "../../JobInfoItem"; // plasmic-import: xygnROtIqhem/component
import Footer from "../../Footer"; // plasmic-import: 88XNNVHOq8_x/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9EC4CuzhysbPvP3VCVkLZh/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9EC4CuzhysbPvP3VCVkLZh/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9EC4CuzhysbPvP3VCVkLZh/projectcss
import sty from "./PlasmicJobDetail.module.css"; // plasmic-import: PgVvD4rbt_MH/css

import NotificationIcon from "./icons/PlasmicIcon__Notification"; // plasmic-import: esOtPKp2vWVW/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: LmY2C9AE0H1E/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: IZbzlkEshIXJ/icon
import SearchSvgrepoComSvgIcon from "./icons/PlasmicIcon__SearchSvgrepoComSvg"; // plasmic-import: 1lLTN0p_K5sV/icon
import LocationCheckSvgrepoComSvgIcon from "./icons/PlasmicIcon__LocationCheckSvgrepoComSvg"; // plasmic-import: cxruJQgN1lhV/icon
import CloseSvgrepoComSvgIcon from "./icons/PlasmicIcon__CloseSvgrepoComSvg"; // plasmic-import: SMiZHTztpvq8/icon
import BriefcaseIcon from "./icons/PlasmicIcon__Briefcase"; // plasmic-import: RQyncDfODii3/icon
import ClockHour4Icon from "../library_tabler_3_2_icons/icons/PlasmicIcon__ClockHour4"; // plasmic-import: 0KwlUK7Uz6QJ/icon
import UserPlusIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__UserPlus"; // plasmic-import: XRA2ow4WfUKa/icon
import FileCvIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__FileCv"; // plasmic-import: GoWEfYEeQvV4/icon
import HeartAltSvgrepoComSvgIcon from "./icons/PlasmicIcon__HeartAltSvgrepoComSvg"; // plasmic-import: tRWn_wMid5cg/icon
import GroupSvgrepoComSvgIcon from "./icons/PlasmicIcon__GroupSvgrepoComSvg"; // plasmic-import: 8yhoaEhgS1RA/icon
import PhoneCallIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__PhoneCall"; // plasmic-import: 6H2qrbdkwWEC/icon

createPlasmicElementProxy;

export type PlasmicJobDetail__VariantMembers = {};
export type PlasmicJobDetail__VariantsArgs = {};
type VariantPropType = keyof PlasmicJobDetail__VariantsArgs;
export const PlasmicJobDetail__VariantProps = new Array<VariantPropType>();

export type PlasmicJobDetail__ArgsType = {};
type ArgPropType = keyof PlasmicJobDetail__ArgsType;
export const PlasmicJobDetail__ArgProps = new Array<ArgPropType>();

export type PlasmicJobDetail__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<"div">;
  nhaTd?: Flex__<typeof NhaTd>;
  breadcrumb?: Flex__<typeof AntdBreadcrumb>;
  searchBar?: Flex__<"div">;
  searchInput?: Flex__<typeof TextInput>;
  modal2?: Flex__<typeof Modal>;
  h3?: Flex__<"h3">;
  checkbox?: Flex__<typeof AntdCheckbox>;
  select?: Flex__<typeof Select>;
  select2?: Flex__<typeof Select>;
  select3?: Flex__<typeof Select>;
  select4?: Flex__<typeof Select>;
  modal?: Flex__<typeof Modal>;
  motacongviec?: Flex__<"div">;
  yeucaucongviec?: Flex__<"div">;
  phucloiItem?: Flex__<"div">;
  ttvieclam?: Flex__<"div">;
  rightContent?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultJobDetailProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicJobDetail__RenderFunc(props: {
  variants: PlasmicJobDetail__VariantsArgs;
  args: PlasmicJobDetail__ArgsType;
  overrides: PlasmicJobDetail__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "searchInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select3.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select4.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal2.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox[].checked",
        type: "private",
        variableType: "boolean"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_library_tailwind_3_4_colors,
            styleTokensClassNames_library_tailwind_3_4_number_tokens,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames(projectcss.all, sty.navbar)}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__domys)}
              onClick={async event => {
                const $steps = {};

                $steps["goToHomepage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHomepage"] != null &&
                  typeof $steps["goToHomepage"] === "object" &&
                  typeof $steps["goToHomepage"].then === "function"
                ) {
                  $steps["goToHomepage"] = await $steps["goToHomepage"];
                }
              }}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__aOqsM)}
                displayHeight={"50px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "45px"
                    : "50px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/copy_of_vnpt_composable_platform/images/emblemOfVietnamSvg1.png",
                  fullWidth: 1280,
                  fullHeight: 1305,
                  aspectRatio: undefined
                }}
              />

              <div className={classNames(projectcss.all, sty.freeBox___2YSYb)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rkyvj
                  )}
                >
                  {"b\u1ed9 n\u1ed9i v\u1ee5"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lv83
                  )}
                >
                  {"S\u00c0N GIAO D\u1ecaCH VI\u1ec6C L\u00c0M QU\u1ed0C GIA"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__b6Xd
                  )}
                >
                  {
                    "Vi\u1ec7c t\u00ecm ng\u01b0\u1eddi - Ng\u01b0\u1eddi t\u00ecm vi\u1ec7c"
                  }
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___1Z5EJ)}>
              <div className={classNames(projectcss.all, sty.freeBox__iLufp)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qlH1L
                  )}
                >
                  {"Vi\u1ec7c l\u00e0m"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xuEwl
                  )}
                >
                  {"Phi\u00ean GDVL"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__kKji9)}>
                <NhaTd
                  data-plasmic-name={"nhaTd"}
                  data-plasmic-override={overrides.nhaTd}
                  className={classNames("__wab_instance", sty.nhaTd)}
                />

                <div className={classNames(projectcss.all, sty.freeBox__zhD9X)}>
                  <NotificationIcon
                    className={classNames(projectcss.all, sty.svg__sh2PX)}
                    role={"img"}
                  />
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button___0VZfj)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gLvFj
                      )}
                    >
                      {"\u0110\u0103ng nh\u1eadp"}
                    </div>
                  }
                />
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__nct4W)}>
            <div className={classNames(projectcss.all, sty.freeBox___7IHPa)}>
              <AntdBreadcrumb
                data-plasmic-name={"breadcrumb"}
                data-plasmic-override={overrides.breadcrumb}
                className={classNames("__wab_instance", sty.breadcrumb)}
                itemsRaw={
                  <React.Fragment>
                    <AntdBreadcrumbItem
                      className={classNames(
                        "__wab_instance",
                        sty.breadcrumbItem__cxDfO
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ji7Xf
                        )}
                      >
                        {"Trang ch\u1ee7"}
                      </div>
                    </AntdBreadcrumbItem>
                    <AntdBreadcrumbItem
                      className={classNames(
                        "__wab_instance",
                        sty.breadcrumbItem__ex1JW
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fecVz
                        )}
                      >
                        {"Vi\u1ec7c l\u00e0m thi\u1ebft k\u1ebf"}
                      </div>
                    </AntdBreadcrumbItem>
                    <AntdBreadcrumbItem
                      className={classNames(
                        "__wab_instance",
                        sty.breadcrumbItem__rY0C
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2TzZg
                        )}
                      >
                        {"T\u00ecm ki\u1ebfm vi\u1ec7c l\u00e0m"}
                      </div>
                    </AntdBreadcrumbItem>
                  </React.Fragment>
                }
                separator={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__goZw2
                    )}
                  >
                    {"/"}
                  </div>
                }
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__mPzOy)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uxXc
                )}
              >
                {
                  "T\u00ecm Vi\u1ec7c l\u00e0m, C\u00f4ng ty v\u00e0 C\u01a1 h\u1ed9i ngh\u1ec1 nghi\u1ec7p"
                }
              </div>
              <div
                data-plasmic-name={"searchBar"}
                data-plasmic-override={overrides.searchBar}
                className={classNames(projectcss.all, sty.searchBar)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__y6CL)}>
                  <SearchSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__hp6Y6)}
                    role={"img"}
                  />

                  <TextInput
                    data-plasmic-name={"searchInput"}
                    data-plasmic-override={overrides.searchInput}
                    className={classNames("__wab_instance", sty.searchInput)}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "searchInput",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"T\u00ecm vi\u1ec7c..."}
                    type={"plain"}
                    value={generateStateValueProp($state, [
                      "searchInput",
                      "value"
                    ])}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__gmhPi)}
                  >
                    <DataFetcher
                      body={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? (() => {
                              try {
                                return {
                                  path: [],
                                  params: [
                                    {
                                      key: "window.localStorage?.access_token"
                                    }
                                  ],

                                  viewMode: true,
                                  applicationId: "6847dda4cceeff07d3563162",
                                  queryId: "5tegmm3dki33bvz5k5lh60r5"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          : undefined
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.httpRestApiFetcher__kQirB
                      )}
                      dataName={"fetchedData"}
                      errorDisplay={
                        <DataCtxReader__>
                          {$ctx => "Error fetching data"}
                        </DataCtxReader__>
                      }
                      errorName={"fetchError"}
                      loadingDisplay={
                        <DataCtxReader__>
                          {$ctx => "Loading..."}
                        </DataCtxReader__>
                      }
                      method={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "POST"
                          : "GET"
                      }
                      noLayout={false}
                      url={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "https://vieclam.gov.vn/api/query/execute"
                          : "https://api.github.com/users/plasmicapp/repos"
                      }
                    >
                      <DataCtxReader__>
                        {$ctx => (
                          <React.Fragment>
                            <Modal
                              data-plasmic-name={"modal2"}
                              data-plasmic-override={overrides.modal2}
                              className={classNames(
                                "__wab_instance",
                                sty.modal2
                              )}
                              content={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___31ZPd
                                  )}
                                >
                                  {(_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return $ctx.fetchedData;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                    const currentItem = __plasmic_item_0;
                                    const currentIndex = __plasmic_idx_0;
                                    return (
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__idqMj
                                        )}
                                        key={currentIndex}
                                      >
                                        {(() => {
                                          const child$Props = {
                                            checked: generateStateValueProp(
                                              $state,
                                              [
                                                "checkbox",
                                                __plasmic_idx_0,
                                                "checked"
                                              ]
                                            ),
                                            className: classNames(
                                              "__wab_instance",
                                              sty.checkbox
                                            ),
                                            onChange: async (
                                              ...eventArgs: any
                                            ) => {
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "checkbox",
                                                  __plasmic_idx_0,
                                                  "checked"
                                                ]
                                              ).apply(null, eventArgs);
                                            }
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "checked",
                                                plasmicStateName:
                                                  "checkbox[].checked"
                                              }
                                            ],
                                            [__plasmic_idx_0],
                                            undefined ?? {},
                                            child$Props
                                          );
                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "checkbox[].checked",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) => undefined
                                              }
                                            ],
                                            [__plasmic_idx_0]
                                          );
                                          return (
                                            <AntdCheckbox
                                              data-plasmic-name={"checkbox"}
                                              data-plasmic-override={
                                                overrides.checkbox
                                              }
                                              {...child$Props}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__trla8
                                                )}
                                              >
                                                {"Checkbox"}
                                              </div>
                                            </AntdCheckbox>
                                          );
                                        })()}
                                      </div>
                                    );
                                  })}
                                </div>
                              }
                              heading={
                                <h3
                                  data-plasmic-name={"h3"}
                                  data-plasmic-override={overrides.h3}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3
                                  )}
                                >
                                  {
                                    "Danh s\u00e1ch t\u1ec9nh/th\u00e0nh ph\u1ed1"
                                  }
                                </h3>
                              }
                              isOpen={generateStateValueProp($state, [
                                "modal2",
                                "isOpen"
                              ])}
                              onOpenChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "modal2",
                                  "isOpen"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              trigger={
                                <Button
                                  iconStart={true}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___0N4Gp
                                      )}
                                    >
                                      {"Open Modal"}
                                    </div>
                                  }
                                  start={
                                    <LocationCheckSvgrepoComSvgIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__pq6WY
                                      )}
                                      role={"img"}
                                    />
                                  }
                                />
                              }
                            />

                            <Select
                              data-plasmic-name={"select"}
                              data-plasmic-override={overrides.select}
                              className={classNames(
                                "__wab_instance",
                                sty.select
                              )}
                              isOpen={generateStateValueProp($state, [
                                "select",
                                "isOpen"
                              ])}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "select",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              onOpenChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "select",
                                  "isOpen"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"\u0110\u1ecba \u0111i\u1ec3m"}
                              showLabel={false}
                              value={generateStateValueProp($state, [
                                "select",
                                "value"
                              ])}
                            />
                          </React.Fragment>
                        )}
                      </DataCtxReader__>
                    </DataFetcher>
                  </div>
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__bh5N1)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__criSf
                      )}
                    >
                      {"T\u00ecm ki\u1ebfm"}
                    </div>
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__k6H0N)}>
                <div className={classNames(projectcss.all, sty.freeBox__s0Lev)}>
                  <Select
                    data-plasmic-name={"select2"}
                    data-plasmic-override={overrides.select2}
                    className={classNames("__wab_instance", sty.select2)}
                    isOpen={generateStateValueProp($state, [
                      "select2",
                      "isOpen"
                    ])}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select2",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select2",
                        "isOpen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={
                      hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "T\u1ea5t c\u1ea3 ng\u00e0nh ngh\u1ec1"
                        : undefined
                    }
                    showLabel={false}
                    value={generateStateValueProp($state, ["select2", "value"])}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__lHpW)}>
                  <Select
                    data-plasmic-name={"select3"}
                    data-plasmic-override={overrides.select3}
                    className={classNames("__wab_instance", sty.select3)}
                    isOpen={generateStateValueProp($state, [
                      "select3",
                      "isOpen"
                    ])}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select3",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select3",
                        "isOpen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={
                      hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "T\u1ea5t c\u1ea3 c\u1ea5p b\u1eadc"
                        : undefined
                    }
                    showLabel={false}
                    value={generateStateValueProp($state, ["select3", "value"])}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__d4Fp5)}>
                  <Select
                    data-plasmic-name={"select4"}
                    data-plasmic-override={overrides.select4}
                    className={classNames("__wab_instance", sty.select4)}
                    isOpen={generateStateValueProp($state, [
                      "select4",
                      "isOpen"
                    ])}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select4",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select4",
                        "isOpen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={
                      hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "T\u1ea5t c\u1ea3 l\u0129nh v\u1ef1c"
                        : undefined
                    }
                    showLabel={false}
                    value={generateStateValueProp($state, ["select4", "value"])}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__tZiH)}>
                  <CloseSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__eQvtK)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wZbpb
                    )}
                  >
                    {"B\u1ecf ch\u1ecdn"}
                  </div>
                </div>
              </div>
            </div>
            <DataFetcher
              body={(() => {
                try {
                  return {
                    path: [],
                    params: [
                      {
                        key: "window.localStorage?.access_token"
                      },
                      {
                        key: "window.query"
                      },
                      {
                        key: "jobNewId.value",
                        value: "288"
                      }
                    ],

                    viewMode: true,
                    applicationId: "68493861cceeff07d35687c0",
                    queryId: "speqmmmddwyd8ugpza8cysxt"
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames(
                "__wab_instance",
                sty.httpRestApiFetcher__opgMs
              )}
              dataName={"fetchedData"}
              errorDisplay={
                <DataCtxReader__>
                  {$ctx => "Error fetching data"}
                </DataCtxReader__>
              }
              errorName={"fetchError"}
              loadingDisplay={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wuNy3
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </DataCtxReader__>
              }
              method={"POST"}
              noLayout={false}
              url={"https://vieclam.gov.vn/api/query/execute"}
            >
              <DataCtxReader__>
                {$ctx => (
                  <React.Fragment>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zOoWi)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__l0CDs
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wo8Si
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__m2AY8
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nL3Ib
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchedData.data.data.ten;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "aaa";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__g5C3H
                              )}
                            >
                              <BriefcaseIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__jGi8
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__qTunc
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__fEzGs
                                  )}
                                >
                                  {"M\u1ee9c l\u01b0\u01a1ng:"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__qxi3
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $ctx.fetchedData.data.data
                                          .muc_luong;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__wfYse
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__q2Odd
                                )}
                              >
                                <ClockHour4Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__jYeF3
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__sHte
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__tls5G
                                    )}
                                  >
                                    {"H\u1ebft h\u1ea1n:"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__w3Bj
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (() => {
                                            const endDate = new Date(
                                              $ctx.fetchedData.data.data.ngay_het_han
                                            );
                                            const currentDate = new Date();
                                            const timeDiff =
                                              endDate.getTime() -
                                              currentDate.getTime();
                                            const daysDiff = Math.ceil(
                                              timeDiff / (1000 * 3600 * 24)
                                            );
                                            return daysDiff + " ngày";
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__gc4Ih
                                )}
                              >
                                <UserPlusIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__eZyuB
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__uMcnD
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__fctrH
                                    )}
                                  >
                                    {"SL tuy\u1ec3n:"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__qIFnL
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $ctx.fetchedData.data.data
                                            .so_luong;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__tysL
                              )}
                            >
                              <Modal
                                data-plasmic-name={"modal"}
                                data-plasmic-override={overrides.modal}
                                className={classNames(
                                  "__wab_instance",
                                  sty.modal
                                )}
                                isOpen={generateStateValueProp($state, [
                                  "modal",
                                  "isOpen"
                                ])}
                                onOpenChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "modal",
                                    "isOpen"
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                trigger={
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button___6AyLo
                                    )}
                                    iconStart={true}
                                    label={"\u1ee8ng tuy\u1ec3n"}
                                    start={
                                      <FileCvIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__o3Gol
                                        )}
                                        role={"img"}
                                      />
                                    }
                                  />
                                }
                              />

                              <Button
                                className={classNames(
                                  "__wab_instance",
                                  sty.button___8U2Wo
                                )}
                                color={"muted"}
                                iconStart={true}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__aFjeG
                                    )}
                                  >
                                    {"L\u01b0u c\u00f4ng vi\u1ec7c"}
                                  </div>
                                }
                                start={
                                  <HeartAltSvgrepoComSvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__gYk79
                                    )}
                                    role={"img"}
                                  />
                                }
                                type={"bordered"}
                              />
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"motacongviec"}
                            data-plasmic-override={overrides.motacongviec}
                            className={classNames(
                              projectcss.all,
                              sty.motacongviec
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9EZku
                              )}
                            >
                              {"M\u00f4 t\u1ea3 c\u00f4ng vi\u1ec7c"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__it3Tr
                              )}
                            >
                              <div
                                className={projectcss.__wab_expr_html_text}
                                dangerouslySetInnerHTML={{
                                  __html: (() => {
                                    try {
                                      return $ctx.fetchedData.data.data
                                        .mo_ta_cv;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()
                                }}
                              />
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"yeucaucongviec"}
                            data-plasmic-override={overrides.yeucaucongviec}
                            className={classNames(
                              projectcss.all,
                              sty.yeucaucongviec
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xVbRy
                              )}
                            >
                              {"Y\u00eau c\u1ea7u c\u00f4ng vi\u1ec7c"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tnq9N
                              )}
                            >
                              {"Ti\u00eau chu\u1ea9n tuy\u1ec3n d\u1ee5ng"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gXFpN
                              )}
                            >
                              <div
                                className={projectcss.__wab_expr_html_text}
                                dangerouslySetInnerHTML={{
                                  __html: (() => {
                                    try {
                                      return (
                                        $ctx.fetchedData.data.data.yeu_cau_uv ||
                                        "value"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()
                                }}
                              />
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__hGbYh
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__eoZiv
                              )}
                            >
                              {
                                "C\u00e1c ph\u00fac l\u1ee3i d\u00e0nh cho b\u1ea1n"
                              }
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__zwmMs
                              )}
                            >
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])([2, 3, 4]).map(
                                (__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <div
                                      data-plasmic-name={"phucloiItem"}
                                      data-plasmic-override={
                                        overrides.phucloiItem
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.phucloiItem
                                      )}
                                      key={currentIndex}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__cSeZp
                                        )}
                                      >
                                        {"H\u1ed7 tr\u1ee3 \u0103n 3 b\u1eefa"}
                                      </div>
                                    </div>
                                  );
                                }
                              )}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"ttvieclam"}
                            data-plasmic-override={overrides.ttvieclam}
                            className={classNames(
                              projectcss.all,
                              sty.ttvieclam
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dsaWu
                              )}
                            >
                              {"Th\u00f4ng tin vi\u1ec7c l\u00e0m"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__mPx3F
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__iAi
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___0OFnw
                                  )}
                                >
                                  <JobInfoItem
                                    className={classNames(
                                      "__wab_instance",
                                      sty.jobInfoItem__tHnum
                                    )}
                                    title={"Ng\u00e0y \u0111\u0103ng"}
                                    value={(() => {
                                      try {
                                        return $ctx.fetchedData.data.data
                                          .ngay_dang === null
                                          ? new Date().toLocaleDateString()
                                          : $ctx.fetchedData.data.data
                                              .ngay_dang;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "title";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />

                                  <JobInfoItem
                                    className={classNames(
                                      "__wab_instance",
                                      sty.jobInfoItem__iYe4J
                                    )}
                                    title={"Nh\u00f3m ngh\u1ec1"}
                                  />

                                  <JobInfoItem
                                    className={classNames(
                                      "__wab_instance",
                                      sty.jobInfoItem__weM7M
                                    )}
                                    title={"Chuy\u00ean m\u00f4n"}
                                  />

                                  <JobInfoItem
                                    className={classNames(
                                      "__wab_instance",
                                      sty.jobInfoItem___8Huzb
                                    )}
                                    title={"Lo\u1ea1i h\u1ee3p \u0111\u1ed3ng"}
                                    value={(() => {
                                      try {
                                        return $ctx.fetchedData.data.data
                                          .loai_hop_dong;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "title";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />

                                  <JobInfoItem
                                    className={classNames(
                                      "__wab_instance",
                                      sty.jobInfoItem___6Bdv
                                    )}
                                    title={"N\u01a1i l\u00e0m vi\u1ec7c"}
                                    value={(() => {
                                      try {
                                        return $ctx.fetchedData.data.data
                                          .dklv_noi_lv;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "title";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />

                                  <JobInfoItem
                                    className={classNames(
                                      "__wab_instance",
                                      sty.jobInfoItem___9Sxct
                                    )}
                                    title={
                                      "Tr\u1ecdng l\u01b0\u1ee3ng n\u00e2ng"
                                    }
                                    value={(() => {
                                      try {
                                        return $ctx.fetchedData.data.data
                                          .dklv_trong_luong;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "title";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />

                                  <JobInfoItem
                                    className={classNames(
                                      "__wab_instance",
                                      sty.jobInfoItem___7B7Gn
                                    )}
                                    title={"D\u00f9ng 2 tay"}
                                    value={(() => {
                                      try {
                                        return $ctx.fetchedData.data.data
                                          .dklv_tay;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "title";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__deESf
                                  )}
                                >
                                  <JobInfoItem
                                    className={classNames(
                                      "__wab_instance",
                                      sty.jobInfoItem__uWqGt
                                    )}
                                    title={
                                      "S\u1ed1 n\u0103m KN t\u1ed1i thi\u1ec3u"
                                    }
                                    value={(() => {
                                      try {
                                        return $ctx.fetchedData.data.data
                                          .kinh_nghiem;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "title";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />

                                  <JobInfoItem
                                    className={classNames(
                                      "__wab_instance",
                                      sty.jobInfoItem__ySscN
                                    )}
                                    title={
                                      "Tr\u00ecnh \u0111\u1ed9 h\u1ecdc v\u1ea5n t\u1ed5i thi\u1ec3u"
                                    }
                                  />

                                  <JobInfoItem
                                    className={classNames(
                                      "__wab_instance",
                                      sty.jobInfoItem___4BfT
                                    )}
                                    title={
                                      "Tr\u00ecnh \u0111\u1ed9 chuy\u00ean m\u00f4n"
                                    }
                                    value={(() => {
                                      try {
                                        return $ctx.fetchedData.data.data
                                          .trinh_do_cmktid;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "title";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />

                                  <JobInfoItem
                                    className={classNames(
                                      "__wab_instance",
                                      sty.jobInfoItem__zlxqr
                                    )}
                                    title={
                                      "H\u00ecnh th\u1ee9c l\u00e0m vi\u1ec7c"
                                    }
                                    value={(() => {
                                      try {
                                        return $ctx.fetchedData.data.data
                                          .hinh_thuc_lam_viec;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "title";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />

                                  <JobInfoItem
                                    className={classNames(
                                      "__wab_instance",
                                      sty.jobInfoItem___8Dd19
                                    )}
                                    title={
                                      "\u0110\u1ee9ng ho\u1eb7c \u0111i l\u1ea1i"
                                    }
                                    value={(() => {
                                      try {
                                        return $ctx.fetchedData.data.data
                                          .dklv_dung_di;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "title";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />

                                  <JobInfoItem
                                    className={classNames(
                                      "__wab_instance",
                                      sty.jobInfoItem__wodYv
                                    )}
                                    title={"Nghe n\u00f3i"}
                                    value={(() => {
                                      try {
                                        return $ctx.fetchedData.data.data
                                          .dklv_nghe_noi;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "title";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />

                                  <JobInfoItem
                                    className={classNames(
                                      "__wab_instance",
                                      sty.jobInfoItem__tKwt
                                    )}
                                    title={
                                      "S\u1eb5n s\u00e0ng l\u00e0m vi\u1ec7c"
                                    }
                                    value={(() => {
                                      try {
                                        return $ctx.fetchedData.data.data
                                          .san_sang_lv_1;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "title";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__qPsik
                                  )}
                                >
                                  <JobInfoItem
                                    className={classNames(
                                      "__wab_instance",
                                      sty.jobInfoItem__w3TRj
                                    )}
                                    title={"Ch\u1ee9c v\u1ee5"}
                                    value={(() => {
                                      try {
                                        return $ctx.fetchedData.data.data
                                          .chuc_vu;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "title";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />

                                  <JobInfoItem
                                    className={classNames(
                                      "__wab_instance",
                                      sty.jobInfoItem__sALxD
                                    )}
                                    title={"K\u1ef9 n\u0103ng"}
                                  />

                                  <JobInfoItem
                                    className={classNames(
                                      "__wab_instance",
                                      sty.jobInfoItem__uCr8E
                                    )}
                                    title={
                                      "\u0110\u1ed1i t\u01b0\u1ee3ng \u01b0u ti\u00ean"
                                    }
                                    value={(() => {
                                      try {
                                        return $ctx.fetchedData.data.data
                                          .doi_tuong_utid[0];
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "title";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />

                                  <JobInfoItem
                                    className={classNames(
                                      "__wab_instance",
                                      sty.jobInfoItem__ysmZe
                                    )}
                                    title={
                                      "Kh\u1ea3 n\u0103ng \u0111\u00e1p \u1ee9ng"
                                    }
                                    value={(() => {
                                      try {
                                        return $ctx.fetchedData.data.data
                                          .kha_nang_dap_ung;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "title";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />

                                  <JobInfoItem
                                    className={classNames(
                                      "__wab_instance",
                                      sty.jobInfoItem__ikJdb
                                    )}
                                    title={"Th\u1ecb l\u1ef1c"}
                                    value={(() => {
                                      try {
                                        return $ctx.fetchedData.data.data
                                          .dklv_thi_luc;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "title";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />

                                  <JobInfoItem
                                    className={classNames(
                                      "__wab_instance",
                                      sty.jobInfoItem__fmXxL
                                    )}
                                    title={"Thao t\u00e1c b\u1eb1ng tay"}
                                    value={(() => {
                                      try {
                                        return $ctx.fetchedData.data.data
                                          .dklv_thao_tac;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "title";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                </div>
                              </div>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___1QbJi
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gcVeg
                              )}
                            >
                              {
                                "\u0110\u1ecba \u0111i\u1ec3m l\u00e0m vi\u1ec7c"
                              }
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__qvi3S
                              )}
                            >
                              <LocationCheckSvgrepoComSvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__eh0Em
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__nqDr
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchedData.data.data
                                        .noi_lv_tinh === null
                                        ? "value"
                                        : $ctx.fetchedData.data.data
                                            .noi_lv_tinh;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xBl0M
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gv5DK
                              )}
                            >
                              {"H\u00ecnh th\u1ee9c tuy\u1ec3n"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__l8E0I
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchedData.data.data
                                      .hinh_thuc_tuyen_dung === null
                                      ? "value"
                                      : $ctx.fetchedData.data.data
                                          .hinh_thuc_tuyen_dung;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Tr\u1ef1c ti\u1ebfp";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"rightContent"}
                          data-plasmic-override={overrides.rightContent}
                          className={classNames(
                            projectcss.all,
                            sty.rightContent
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__h9RvY
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__cx2Rt)}
                              displayHeight={"104px"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"100%"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/copy_of_vnpt_composable_platform/images/e359B03306302A04F475861B1A1F65A8E00Eb65FJpg.jpg",
                                fullWidth: 1320,
                                fullHeight: 300,
                                aspectRatio: undefined
                              }}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___6NH6
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__fgif1)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"auto"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/copy_of_vnpt_composable_platform/images/croppedLogoVnpt2Jpg.jpg",
                                  fullWidth: 512,
                                  fullHeight: 512,
                                  aspectRatio: undefined
                                }}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___7SbVo
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qvDpA
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchedData.data.data
                                        .doanh_nghiep === null
                                        ? "value"
                                        : $ctx.fetchedData.data.data
                                            .doanh_nghiep;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ghNa2
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__yaZqC
                                  )}
                                >
                                  <LocationCheckSvgrepoComSvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__pnaCq
                                    )}
                                    role={"img"}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__ayWJs
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___30Z0Q
                                      )}
                                    >
                                      {
                                        "57 Hu\u1ef3nh Th\u00fac Kh\u00e1ng, L\u00e1ng H\u1ea1, TP. H\u00e0 N\u1ed9i"
                                      }
                                    </div>
                                    <PlasmicLink__
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.a,
                                        projectcss.__wab_text,
                                        sty.link__cmvDb
                                      )}
                                      component={Link}
                                      platform={"nextjs"}
                                    >
                                      {"(Xem b\u1ea3n \u0111\u1ed3)"}
                                    </PlasmicLink__>
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__fWXx9
                                  )}
                                >
                                  <GroupSvgrepoComSvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__a4XxH
                                    )}
                                    role={"img"}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___5JEiT
                                    )}
                                  >
                                    {"72 nh\u00e2n vi\u00ean"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__yiPfh
                                  )}
                                >
                                  <PhoneCallIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__fYoO4
                                    )}
                                    role={"img"}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__t5AEg
                                    )}
                                  >
                                    {"0944015294"}
                                  </div>
                                </div>
                              </div>
                              <PlasmicLink__
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  projectcss.__wab_text,
                                  sty.link__mUxBn
                                )}
                                component={Link}
                                href={"https://www.plasmic.app/"}
                                platform={"nextjs"}
                              >
                                {
                                  "Trang tuy\u1ec3n d\u1ee5ng c\u1ee7a c\u00f4ng ty"
                                }
                              </PlasmicLink__>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__nmp0D
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__efu4K
                              )}
                            >
                              {"Vi\u1ec7c l\u00e0m t\u01b0\u01a1ng t\u1ef1"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xtyL4
                              )}
                            >
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])([2, 3, 4]).map(
                                (__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___0XYek
                                      )}
                                      key={currentIndex}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__fw6KC
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(
                                            sty.img___4KiuA
                                          )}
                                          displayHeight={"auto"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"100%"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"auto"}
                                          loading={"lazy"}
                                          src={{
                                            src: "/plasmic/copy_of_vnpt_composable_platform/images/_6807709Dedb625840462618C8F61F5Ad3C59E31FPng.png",
                                            fullWidth: 988,
                                            fullHeight: 602,
                                            aspectRatio: undefined
                                          }}
                                        />
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__l8Ty0
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__ocGes
                                          )}
                                        >
                                          {"Enter some text"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__oTx8Y
                                          )}
                                        >
                                          {"Enter some text"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__tyZb
                                          )}
                                        >
                                          <BriefcaseIcon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__ySio1
                                            )}
                                            role={"img"}
                                          />

                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__qlubs
                                            )}
                                          >
                                            {"Enter some text"}
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__gl5Bg
                                          )}
                                        >
                                          <LocationCheckSvgrepoComSvgIcon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__rc53G
                                            )}
                                            role={"img"}
                                          />

                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__zfXli
                                            )}
                                          >
                                            {"Enter some text"}
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  );
                                }
                              )}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vOGo)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wcZg
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ulCz
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img___56Qv)}
                            displayHeight={"104px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"100%"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/copy_of_vnpt_composable_platform/images/e359B03306302A04F475861B1A1F65A8E00Eb65FJpg.jpg",
                              fullWidth: 1320,
                              fullHeight: 300,
                              aspectRatio: undefined
                            }}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___74Xod
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__jXy9R)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/copy_of_vnpt_composable_platform/images/croppedLogoVnpt2Jpg.jpg",
                                fullWidth: 512,
                                fullHeight: 512,
                                aspectRatio: undefined
                              }}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__rD1Mn
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qUq5H
                              )}
                            >
                              {"Enter some text"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__aIie3
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__dDuPo
                                )}
                              >
                                <LocationCheckSvgrepoComSvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__t9AcN
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__uasWs
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__iawlo
                                    )}
                                  >
                                    {
                                      "57 Hu\u1ef3nh Th\u00fac Kh\u00e1ng, L\u00e1ng H\u1ea1, TP. H\u00e0 N\u1ed9i"
                                    }
                                  </div>
                                  <PlasmicLink__
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      projectcss.__wab_text,
                                      sty.link__cz0Vy
                                    )}
                                    component={Link}
                                    href={"https://www.plasmic.app/"}
                                    platform={"nextjs"}
                                  >
                                    {"(Xem b\u1ea3n \u0111\u1ed3)"}
                                  </PlasmicLink__>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__zaunY
                                )}
                              >
                                <GroupSvgrepoComSvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__qlIy5
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___3LM7
                                  )}
                                >
                                  {"72 nh\u00e2n vi\u00ean"}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__iUbOd
                                )}
                              >
                                <PhoneCallIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__x1Srm
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__wv1E9
                                  )}
                                >
                                  {"0944015294"}
                                </div>
                              </div>
                            </div>
                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link__asjUv
                              )}
                              component={Link}
                              href={"https://www.plasmic.app/"}
                              platform={"nextjs"}
                            >
                              {
                                "Trang tuy\u1ec3n d\u1ee5ng c\u1ee7a c\u00f4ng ty"
                              }
                            </PlasmicLink__>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zYmcl
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___9F74F
                            )}
                          >
                            {"Vi\u1ec7c l\u00e0m t\u01b0\u01a1ng t\u1ef1"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__gSGo
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              [2, 3, 4]
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__eUhE
                                  )}
                                  key={currentIndex}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__biTl
                                    )}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__xyQP)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"auto"}
                                      loading={"lazy"}
                                      src={{
                                        src: "/plasmic/copy_of_vnpt_composable_platform/images/_6807709Dedb625840462618C8F61F5Ad3C59E31FPng.png",
                                        fullWidth: 988,
                                        fullHeight: 602,
                                        aspectRatio: undefined
                                      }}
                                    />
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__d3Pv4
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___9EdmQ
                                      )}
                                    >
                                      {"Enter some text"}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__grjPm
                                      )}
                                    >
                                      {"Enter some text"}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___5GdqH
                                      )}
                                    >
                                      <BriefcaseIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg___9Poz8
                                        )}
                                        role={"img"}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__hb4Vl
                                        )}
                                      >
                                        {"Enter some text"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__iq52D
                                      )}
                                    >
                                      <LocationCheckSvgrepoComSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__ae2Gd
                                        )}
                                        role={"img"}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__ttRlM
                                        )}
                                      >
                                        {"Enter some text"}
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                        </div>
                      </div>
                    </div>
                  </React.Fragment>
                )}
              </DataCtxReader__>
            </DataFetcher>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "nhaTd",
    "breadcrumb",
    "searchBar",
    "searchInput",
    "modal2",
    "h3",
    "checkbox",
    "select",
    "select2",
    "select3",
    "select4",
    "modal",
    "motacongviec",
    "yeucaucongviec",
    "phucloiItem",
    "ttvieclam",
    "rightContent",
    "footer"
  ],
  navbar: ["navbar", "nhaTd"],
  nhaTd: ["nhaTd"],
  breadcrumb: ["breadcrumb"],
  searchBar: ["searchBar", "searchInput", "modal2", "h3", "checkbox", "select"],
  searchInput: ["searchInput"],
  modal2: ["modal2", "h3", "checkbox"],
  h3: ["h3"],
  checkbox: ["checkbox"],
  select: ["select"],
  select2: ["select2"],
  select3: ["select3"],
  select4: ["select4"],
  modal: ["modal"],
  motacongviec: ["motacongviec"],
  yeucaucongviec: ["yeucaucongviec"],
  phucloiItem: ["phucloiItem"],
  ttvieclam: ["ttvieclam"],
  rightContent: ["rightContent"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: "div";
  nhaTd: typeof NhaTd;
  breadcrumb: typeof AntdBreadcrumb;
  searchBar: "div";
  searchInput: typeof TextInput;
  modal2: typeof Modal;
  h3: "h3";
  checkbox: typeof AntdCheckbox;
  select: typeof Select;
  select2: typeof Select;
  select3: typeof Select;
  select4: typeof Select;
  modal: typeof Modal;
  motacongviec: "div";
  yeucaucongviec: "div";
  phucloiItem: "div";
  ttvieclam: "div";
  rightContent: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicJobDetail__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicJobDetail__VariantsArgs;
    args?: PlasmicJobDetail__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicJobDetail__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicJobDetail__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicJobDetail__ArgProps,
          internalVariantPropNames: PlasmicJobDetail__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicJobDetail__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicJobDetail";
  } else {
    func.displayName = `PlasmicJobDetail.${nodeName}`;
  }
  return func;
}

export const PlasmicJobDetail = Object.assign(
  // Top-level PlasmicJobDetail renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    nhaTd: makeNodeComponent("nhaTd"),
    breadcrumb: makeNodeComponent("breadcrumb"),
    searchBar: makeNodeComponent("searchBar"),
    searchInput: makeNodeComponent("searchInput"),
    modal2: makeNodeComponent("modal2"),
    h3: makeNodeComponent("h3"),
    checkbox: makeNodeComponent("checkbox"),
    select: makeNodeComponent("select"),
    select2: makeNodeComponent("select2"),
    select3: makeNodeComponent("select3"),
    select4: makeNodeComponent("select4"),
    modal: makeNodeComponent("modal"),
    motacongviec: makeNodeComponent("motacongviec"),
    yeucaucongviec: makeNodeComponent("yeucaucongviec"),
    phucloiItem: makeNodeComponent("phucloiItem"),
    ttvieclam: makeNodeComponent("ttvieclam"),
    rightContent: makeNodeComponent("rightContent"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicJobDetail
    internalVariantProps: PlasmicJobDetail__VariantProps,
    internalArgProps: PlasmicJobDetail__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicJobDetail;
/* prettier-ignore-end */
