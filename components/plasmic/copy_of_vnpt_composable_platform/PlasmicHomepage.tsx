/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9EC4CuzhysbPvP3VCVkLZh
// Component: Qsy0OcQsZfem

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import NhaTd from "../../NhaTd"; // plasmic-import: oY2WxEuoZMYU/component
import Button from "../../Button"; // plasmic-import: 8b0EpCKEWBCK/component
import TextInput from "../../TextInput"; // plasmic-import: -hxqxS1L-JW_/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import Select from "../../Select"; // plasmic-import: Q9DPvojwXDcb/component
import MenuItem from "../../MenuItem"; // plasmic-import: 8zjSwXU6lca-/component
import SessionCard from "../../SessionCard"; // plasmic-import: Ofle8ukDDQQ7/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import RecruitmentNews from "../../RecruitmentNews"; // plasmic-import: t8xTWLFtl4jj/component
import OutstandingJobCard from "../../OutstandingJobCard"; // plasmic-import: uTIMZbsxpLNA/component
import CompanyOutstanding from "../../CompanyOutstanding"; // plasmic-import: tdxS2SPrCF92/component
import { SimpleChart } from "@plasmicpkgs/react-chartjs-2";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import Footer from "../../Footer"; // plasmic-import: 88XNNVHOq8_x/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9EC4CuzhysbPvP3VCVkLZh/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9EC4CuzhysbPvP3VCVkLZh/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9EC4CuzhysbPvP3VCVkLZh/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: Qsy0OcQsZfem/css

import NotificationSvgIcon from "./icons/PlasmicIcon__NotificationSvg"; // plasmic-import: CgRGninKlXOJ/icon
import Menu2Icon from "../library_tabler_3_2_icons/icons/PlasmicIcon__Menu2"; // plasmic-import: d1b8xWlyUKWm/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: LmY2C9AE0H1E/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: IZbzlkEshIXJ/icon
import CloseSvgrepoComSvgIcon from "./icons/PlasmicIcon__CloseSvgrepoComSvg"; // plasmic-import: SMiZHTztpvq8/icon
import SearchSvgrepoComSvgIcon from "./icons/PlasmicIcon__SearchSvgrepoComSvg"; // plasmic-import: 1lLTN0p_K5sV/icon
import Right2SvgrepoComSvgIcon from "./icons/PlasmicIcon__Right2SvgrepoComSvg"; // plasmic-import: 8SJ0oXXfSXS-/icon
import PlusIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__Plus"; // plasmic-import: _pdhShvRj8aO/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {
  menuOpened: "menuOpened";
};
export type PlasmicHomepage__VariantsArgs = {
  menuOpened?: SingleBooleanChoiceArg<"menuOpened">;
};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>(
  "menuOpened"
);

export type PlasmicHomepage__ArgsType = { onLoad?: () => void };
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>("onLoad");

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  logo?: Flex__<"div">;
  overlay?: Flex__<"div">;
  nhaTd?: Flex__<typeof NhaTd>;
  menuSidebar?: Flex__<"div">;
  searchBar?: Flex__<"div">;
  searchInputHehehe?: Flex__<typeof TextInput>;
  provinceSearch?: Flex__<typeof Select>;
  menuItem?: Flex__<typeof MenuItem>;
  workSessionTitle?: Flex__<"div">;
  title?: Flex__<"div">;
  viewAll?: Flex__<"div">;
  sessionCard?: Flex__<typeof SessionCard>;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  viewAll2?: Flex__<"div">;
  queryRequirementNews?: Flex__<typeof DataFetcher>;
  recruitmentNews?: Flex__<typeof RecruitmentNews>;
  viewAll3?: Flex__<"div">;
  outstandingJob?: Flex__<typeof DataFetcher>;
  outstandingJobCard?: Flex__<typeof OutstandingJobCard>;
  viewAll4?: Flex__<"div">;
  outstadingCompanyFetch?: Flex__<typeof DataFetcher>;
  companyOutstanding?: Flex__<typeof CompanyOutstanding>;
  viewAll5?: Flex__<"div">;
  table?: Flex__<typeof RichTable>;
  table2?: Flex__<typeof RichTable>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "table2.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table2.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table2.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table2.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "filterValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "isMenuOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "menuOpened",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.isMenuOpen ? "menuOpened" : null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.menuOpened
      },
      {
        path: "searchInputHehehe.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "provinceSearch.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "provinceSearch.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sectionSlide",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "requirementNews",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    queryUser: usePlasmicDataOp(() => {
      return {
        sourceId: "qnndnBczKX5K9tyBxG4HFz",
        opId: "f8d3de7e-dce7-4785-90c9-dd8893fddfed",
        userArgs: {},
        cacheKey: `plasmic.$.f8d3de7e-dce7-4785-90c9-dd8893fddfed.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryCung: usePlasmicDataOp(() => {
      return {
        sourceId: "4C4cr4SVULBsiTpDKg4ojU",
        opId: "fe08937f-786b-4419-ba13-1becb78288db",
        userArgs: {},
        cacheKey: `plasmic.$.fe08937f-786b-4419-ba13-1becb78288db.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryCau: usePlasmicDataOp(() => {
      return {
        sourceId: "4C4cr4SVULBsiTpDKg4ojU",
        opId: "14f56532-cf7e-4e2c-940d-2d41869906ae",
        userArgs: {},
        cacheKey: `plasmic.$.14f56532-cf7e-4e2c-940d-2d41869906ae.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_library_tailwind_3_4_colors,
            styleTokensClassNames_library_tailwind_3_4_number_tokens,
            styleTokensClassNames_plasmic_rich_components,
            sty.root,
            {
              [sty.rootmenuOpened]: hasVariant(
                $state,
                "menuOpened",
                "menuOpened"
              )
            }
          )}
          onLoad={async event => {
            const $steps = {};
          }}
        >
          <div className={classNames(projectcss.all, sty.freeBox__dBkO4)}>
            <div
              data-plasmic-name={"logo"}
              data-plasmic-override={overrides.logo}
              className={classNames(projectcss.all, sty.logo)}
              onClick={async event => {
                const $steps = {};

                $steps["goToHomepage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHomepage"] != null &&
                  typeof $steps["goToHomepage"] === "object" &&
                  typeof $steps["goToHomepage"].then === "function"
                ) {
                  $steps["goToHomepage"] = await $steps["goToHomepage"];
                }
              }}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__kbSMp)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                height={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "40"
                    : "45px"
                }
                loading={"lazy"}
                src={
                  "https://storage.vieclam.gov.vn/san-viec-lam-image/logoSan.png"
                }
                width={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "40"
                    : "44px"
                }
              />

              <div className={classNames(projectcss.all, sty.freeBox___39T75)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pVioa
                  )}
                >
                  {"B\u1ed8 N\u1ed8I V\u1ee4"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tqoPk
                  )}
                >
                  {"S\u00c0N GIAO D\u1ecaCH VI\u1ec6C L\u00c0M QU\u1ed0C GIA"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1XKbd
                  )}
                >
                  {
                    "Vi\u1ec7c t\u00ecm ng\u01b0\u1eddi - Ng\u01b0\u1eddi t\u00ecm vi\u1ec7c"
                  }
                </div>
              </div>
            </div>
            {(
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return $state.isMenuOpen;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <div
                data-plasmic-name={"overlay"}
                data-plasmic-override={overrides.overlay}
                className={classNames(projectcss.all, sty.overlay)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateIsMenuOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["isMenuOpen"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateIsMenuOpen"] != null &&
                    typeof $steps["updateIsMenuOpen"] === "object" &&
                    typeof $steps["updateIsMenuOpen"].then === "function"
                  ) {
                    $steps["updateIsMenuOpen"] = await $steps[
                      "updateIsMenuOpen"
                    ];
                  }
                }}
              />
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__awZha)}>
              <NhaTd
                data-plasmic-name={"nhaTd"}
                data-plasmic-override={overrides.nhaTd}
                className={classNames("__wab_instance", sty.nhaTd)}
              />

              <div
                className={classNames(projectcss.all, sty.freeBox__xFLy, {
                  [sty.freeBoxmenuOpened__xFLYba2I2]: hasVariant(
                    $state,
                    "menuOpened",
                    "menuOpened"
                  )
                })}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateIsMenuOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["isMenuOpen"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateIsMenuOpen"] != null &&
                    typeof $steps["updateIsMenuOpen"] === "object" &&
                    typeof $steps["updateIsMenuOpen"].then === "function"
                  ) {
                    $steps["updateIsMenuOpen"] = await $steps[
                      "updateIsMenuOpen"
                    ];
                  }
                }}
              >
                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? Menu2Icon
                      : NotificationSvgIcon
                  }
                  className={classNames(projectcss.all, sty.svg__qAgiP)}
                  role={"img"}
                />
              </div>
              <Button
                className={classNames("__wab_instance", sty.button__yHSz)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__t3ZeZ
                    )}
                  >
                    {"\u0110\u0103ng nh\u1eadp"}
                  </div>
                }
              />
            </div>
          </div>
          <div
            data-plasmic-name={"menuSidebar"}
            data-plasmic-override={overrides.menuSidebar}
            className={classNames(projectcss.all, sty.menuSidebar, {
              [sty.menuSidebarmenuOpened]: hasVariant(
                $state,
                "menuOpened",
                "menuOpened"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__twCev, {
                [sty.freeBoxmenuOpened__twCeVba2I2]: hasVariant(
                  $state,
                  "menuOpened",
                  "menuOpened"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__glYvm, {
                  [sty.freeBoxmenuOpened__glYvmba2I2]: hasVariant(
                    $state,
                    "menuOpened",
                    "menuOpened"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__dXFvm, {
                    [sty.freeBoxmenuOpened__dXFvmba2I2]: hasVariant(
                      $state,
                      "menuOpened",
                      "menuOpened"
                    )
                  })}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__gNqsH, {
                      [sty.imgmenuOpened__gNqsHba2I2]: hasVariant(
                        $state,
                        "menuOpened",
                        "menuOpened"
                      )
                    })}
                    displayHeight={"40px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"40px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/copy_of_vnpt_composable_platform/images/emblemOfVietnamSvg1.png",
                      fullWidth: 1280,
                      fullHeight: 1305,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__vMb0W, {
                      [sty.freeBoxmenuOpened__vMb0Wba2I2]: hasVariant(
                        $state,
                        "menuOpened",
                        "menuOpened"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qOiRm,
                        {
                          [sty.textmenuOpened__qOiRMba2I2]: hasVariant(
                            $state,
                            "menuOpened",
                            "menuOpened"
                          )
                        }
                      )}
                    >
                      {"B\u1ed8 N\u1ed8I V\u1ee4"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__neaon,
                        {
                          [sty.textmenuOpened__neaonba2I2]: hasVariant(
                            $state,
                            "menuOpened",
                            "menuOpened"
                          )
                        }
                      )}
                    >
                      {
                        "S\u00c0N GIAO D\u1ecaCH VI\u1ec6C L\u00c0M QU\u1ed0C GIA"
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sogLc,
                        {
                          [sty.textmenuOpened__sogLcba2I2]: hasVariant(
                            $state,
                            "menuOpened",
                            "menuOpened"
                          )
                        }
                      )}
                    >
                      {
                        "Vi\u1ec7c t\u00ecm ng\u01b0\u1eddi - Ng\u01b0\u1eddi t\u00ecm vi\u1ec7c"
                      }
                    </div>
                  </div>
                </div>
                <CloseSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__dbw1S, {
                    [sty.svgmenuOpened__dbw1Sba2I2]: hasVariant(
                      $state,
                      "menuOpened",
                      "menuOpened"
                    )
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateIsMenuOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["isMenuOpen"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateIsMenuOpen"] != null &&
                      typeof $steps["updateIsMenuOpen"] === "object" &&
                      typeof $steps["updateIsMenuOpen"].then === "function"
                    ) {
                      $steps["updateIsMenuOpen"] = await $steps[
                        "updateIsMenuOpen"
                      ];
                    }
                  }}
                  role={"img"}
                />
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__ic7Qx, {
                [sty.freeBoxmenuOpened__ic7Qxba2I2]: hasVariant(
                  $state,
                  "menuOpened",
                  "menuOpened"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pzGrJ,
                  {
                    [sty.textmenuOpened__pzGrJba2I2]: hasVariant(
                      $state,
                      "menuOpened",
                      "menuOpened"
                    )
                  }
                )}
              >
                {"Vi\u1ec7c l\u00e0m"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zaEht
                )}
              >
                {"Phi\u00ean GDVL"}
              </div>
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__w5PK, {
              [sty.freeBoxmenuOpened__w5PKba2I2]: hasVariant(
                $state,
                "menuOpened",
                "menuOpened"
              )
            })}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__j5GpO)}
              displayHeight={
                hasVariant(globalVariants, "screen", "tabletOnly")
                  ? "265px"
                  : "475px"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/copy_of_vnpt_composable_platform/images/lifestyleBusinessPeopleHoldingLaptopComputerOfficeDesk1Png.png",
                fullWidth: 287,
                fullHeight: 506,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__pAAxC)}
              displayHeight={"463px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/copy_of_vnpt_composable_platform/images/corporateYoungEntrepreneursConceptSuccessfulBusinesswomanUsingDigitalTabletPrepares1Png.png",
                fullWidth: 378,
                fullHeight: 520,
                aspectRatio: undefined
              }}
            />

            <div className={classNames(projectcss.all, sty.freeBox__yCuiz)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fqzx2
                )}
              >
                <React.Fragment>
                  <React.Fragment>{"H\u00e0ng ngh\u00ecn "}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#5CD4FF" }}
                  >
                    {"vi\u1ec7c l\u00e0m"}
                  </span>
                  <React.Fragment>{" \u1edf \u0111\u00e2y "}</React.Fragment>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__epeQm
                )}
              >
                {
                  "T\u00ecm Vi\u1ec7c l\u00e0m, C\u00f4ng ty v\u00e0 C\u01a1 h\u1ed9i ngh\u1ec1 nghi\u1ec7p"
                }
              </div>
              <div
                data-plasmic-name={"searchBar"}
                data-plasmic-override={overrides.searchBar}
                className={classNames(projectcss.all, sty.searchBar)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__tkWlx)}>
                  <SearchSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg___4PiK)}
                    role={"img"}
                  />

                  <TextInput
                    data-plasmic-name={"searchInputHehehe"}
                    data-plasmic-override={overrides.searchInputHehehe}
                    className={classNames(
                      "__wab_instance",
                      sty.searchInputHehehe
                    )}
                    inputMode={"text"}
                    inputType={"search"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "searchInputHehehe",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async val => {
                        const $steps = {};

                        $steps["updateSearchInputValue"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["searchInputHehehe", "value"]
                                },
                                operation: 0,
                                value: $state.searchInputHehehe.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSearchInputValue"] != null &&
                          typeof $steps["updateSearchInputValue"] ===
                            "object" &&
                          typeof $steps["updateSearchInputValue"].then ===
                            "function"
                        ) {
                          $steps["updateSearchInputValue"] = await $steps[
                            "updateSearchInputValue"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={"T\u00ecm vi\u1ec7c...."}
                    type={"plain"}
                    value={generateStateValueProp($state, [
                      "searchInputHehehe",
                      "value"
                    ])}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__cEuGd)}
                  >
                    <DataFetcher
                      body={{
                        path: [],
                        params: [{ key: "window.localStorage?.access_token" }],
                        viewMode: true,
                        applicationId: "6847dda4cceeff07d3563162",
                        queryId: "5tegmm3dki33bvz5k5lh60r5"
                      }}
                      className={classNames(
                        "__wab_instance",
                        sty.httpRestApiFetcher__ln2Hv
                      )}
                      dataName={"fetchedData"}
                      errorDisplay={
                        <DataCtxReader__>
                          {$ctx => "Error fetching data"}
                        </DataCtxReader__>
                      }
                      errorName={"fetchError"}
                      loadingDisplay={
                        <DataCtxReader__>
                          {$ctx => "Loading..."}
                        </DataCtxReader__>
                      }
                      method={"POST"}
                      noLayout={false}
                      url={"https://vieclam.gov.vn/api/query/execute"}
                    >
                      <DataCtxReader__>
                        {$ctx => (
                          <Select
                            data-plasmic-name={"provinceSearch"}
                            data-plasmic-override={overrides.provinceSearch}
                            className={classNames(
                              "__wab_instance",
                              sty.provinceSearch
                            )}
                            isOpen={generateStateValueProp($state, [
                              "provinceSearch",
                              "isOpen"
                            ])}
                            items={(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $ctx.fetchedData.data.data;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <MenuItem
                                  data-plasmic-name={"menuItem"}
                                  data-plasmic-override={overrides.menuItem}
                                  key={currentIndex}
                                  label={(() => {
                                    try {
                                      return currentItem.ten;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Item 1";
                                      }
                                      throw e;
                                    }
                                  })()}
                                  value={(() => {
                                    try {
                                      return currentItem.ma;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              );
                            })}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "provinceSearch",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }

                              (async val => {
                                const $steps = {};

                                $steps["updateProvinceSearchValue"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: [
                                            "provinceSearch",
                                            "value"
                                          ]
                                        },
                                        operation: 0,
                                        value: $state.provinceSearch.value
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateProvinceSearchValue"] != null &&
                                  typeof $steps["updateProvinceSearchValue"] ===
                                    "object" &&
                                  typeof $steps["updateProvinceSearchValue"]
                                    .then === "function"
                                ) {
                                  $steps["updateProvinceSearchValue"] =
                                    await $steps["updateProvinceSearchValue"];
                                }
                              }).apply(null, eventArgs);
                            }}
                            onOpenChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "provinceSearch",
                                "isOpen"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"\u0110\u1ecba \u0111i\u1ec3m"}
                            showLabel={false}
                            value={generateStateValueProp($state, [
                              "provinceSearch",
                              "value"
                            ])}
                          />
                        )}
                      </DataCtxReader__>
                    </DataFetcher>
                  </div>
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__bnWy)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nZZzy
                      )}
                    >
                      {"T\u00ecm ki\u1ebfm"}
                    </div>
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToSearchPage"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: `/search?provinceID=${(() => {
                              try {
                                return $state.provinceSearch.value;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}&keyword=${(() => {
                              try {
                                return $state.searchInputHehehe.value;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}`
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToSearchPage"] != null &&
                      typeof $steps["goToSearchPage"] === "object" &&
                      typeof $steps["goToSearchPage"].then === "function"
                    ) {
                      $steps["goToSearchPage"] = await $steps["goToSearchPage"];
                    }
                  }}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vrH7X
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FFFDFD" }}
                  >
                    {"Ph\u1ed5 bi\u1ebfn:"}
                  </span>
                  <React.Fragment> </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#5CD4FF" }}
                  >
                    {"Designer, Developer Web, IOS, PHP,  Senior Engineer "}
                  </span>
                </React.Fragment>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox___0S8JB, {
                  [sty.freeBoxmenuOpened___0S8JBba2I2]: hasVariant(
                    $state,
                    "menuOpened",
                    "menuOpened"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vytIp
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FFFFFF" }}
                    >
                      {"Th\u1ecb tr\u01b0\u1eddng vi\u1ec7c l\u00e0m:"}
                    </span>
                    <React.Fragment> </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#5CD4FF", fontWeight: 700 }}
                    >
                      {"Ng\u00e0y"}
                    </span>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iXS3
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          const today = new Date();
                          const day = String(today.getDate()).padStart(2, "0");
                          const month = String(today.getMonth() + 1).padStart(
                            2,
                            "0"
                          );
                          const year = today.getFullYear();
                          const formatted = `${day}/${month}/${year}`;
                          return formatted;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__vfZ9C)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"1040px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/copy_of_vnpt_composable_platform/images/vszvdsvds1Png.png",
                fullWidth: 923,
                fullHeight: 358,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__prkp8)}
              displayHeight={"270px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"198px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/copy_of_vnpt_composable_platform/images/corporateYoungEntrepreneursConceptSuccessfulBusinesswomanUsingDigitalTabletPrepares1Png.png",
                fullWidth: 378,
                fullHeight: 520,
                aspectRatio: undefined
              }}
            />
          </div>
          <div
            data-plasmic-name={"workSessionTitle"}
            data-plasmic-override={overrides.workSessionTitle}
            className={classNames(projectcss.all, sty.workSessionTitle)}
          >
            <div
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames(projectcss.all, sty.title)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rfzXx
                )}
              >
                {"Phi\u00ean giao d\u1ecbch vi\u1ec7c l\u00e0m"}
              </div>
              <div
                data-plasmic-name={"viewAll"}
                data-plasmic-override={overrides.viewAll}
                className={classNames(projectcss.all, sty.viewAll)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__snfXu
                  )}
                >
                  {"Xem t\u1ea5t c\u1ea3"}
                </div>
                <Right2SvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__ySZqj)}
                  role={"img"}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__s7SaH)}>
              <Button
                className={classNames("__wab_instance", sty.button__fJJcC)}
                flatSide={[]}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fj4E
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateFilterValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["filterValue"]
                              },
                              operation: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, undefined);
                              return undefined;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateFilterValue"] != null &&
                        typeof $steps["updateFilterValue"] === "object" &&
                        typeof $steps["updateFilterValue"].then === "function"
                      ) {
                        $steps["updateFilterValue"] = await $steps[
                          "updateFilterValue"
                        ];
                      }
                    }}
                  >
                    {"T\u1ea5t c\u1ea3"}
                  </div>
                }
                roundedFull={true}
              />

              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return [
                      { key: "DANG_DIEN_RA", value: "Đang diễn ra" },
                      { key: "SAP_DIEN_RA", value: "Sắp diễn ra" }
                    ];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Button
                    active={undefined}
                    className={classNames("__wab_instance", sty.button__j5Y2P)}
                    key={currentIndex}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__r5Eh4
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.value;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "S\u1eafp di\u1ec5n ra";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateFilterValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["filterValue"]
                              },
                              operation: 0,
                              value: currentItem.key
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateFilterValue"] != null &&
                        typeof $steps["updateFilterValue"] === "object" &&
                        typeof $steps["updateFilterValue"].then === "function"
                      ) {
                        $steps["updateFilterValue"] = await $steps[
                          "updateFilterValue"
                        ];
                      }
                    }}
                    roundedFull={true}
                    type={"bordered"}
                  />
                );
              })}
            </div>
            <DataFetcher
              body={(() => {
                try {
                  return {
                    path: [],
                    params: [
                      {
                        key: 'customPhienGDVL.model.callbackData||""',
                        value: $state.filterValue
                      }
                    ],

                    viewMode: true,
                    applicationId: "6849c2ab3d0f525d93529454",
                    queryId: "41b2wdo3fb4s3orfz46k6kie"
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames(
                "__wab_instance",
                sty.httpRestApiFetcher__cKhTl
              )}
              dataName={"fetchedData"}
              errorDisplay={
                <DataCtxReader__>
                  {$ctx => "Error fetching data"}
                </DataCtxReader__>
              }
              errorName={"fetchError"}
              loadingDisplay={
                <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
              }
              method={"POST"}
              noLayout={false}
              url={"https://vieclam.gov.vn/api/query/execute"}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4GS5L)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $ctx.fetchedData.data.data;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <SessionCard
                          data-plasmic-name={"sessionCard"}
                          data-plasmic-override={overrides.sessionCard}
                          address={(() => {
                            try {
                              return currentItem.diaban_gd_name.join(", ");
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          className={classNames(
                            "__wab_instance",
                            sty.sessionCard
                          )}
                          image={(() => {
                            try {
                              return currentItem.logo_phien_vl[0];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          key={currentIndex}
                          status={(() => {
                            try {
                              return currentItem.trang_thai;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          time={(() => {
                            try {
                              return `${
                                currentItem.thoi_gian_bat_dau.split(" ")[1]
                              } ${
                                currentItem.thoi_gian_bat_dau.split(" ")[0]
                              } - ${
                                currentItem.thoi_gian_ket_thuc.split(" ")[1]
                              } ${
                                currentItem.thoi_gian_ket_thuc.split(" ")[0]
                              }`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          title={(() => {
                            try {
                              return currentItem.ten_phien;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      );
                    })}
                  </div>
                )}
              </DataCtxReader__>
            </DataFetcher>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__z5H47)}>
            {(() => {
              const child$Props = {
                arrows: false,
                autoplay: true,
                beforeChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "currentSlide",
                    ["sliderCarousel", "currentSlide"],
                    SliderWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                centerMode: false,
                className: classNames("__wab_instance", sty.sliderCarousel),
                dots: true,
                initialSlide: generateStateValueProp($state, [
                  "sliderCarousel",
                  "currentSlide"
                ]),
                ref: ref => {
                  $refs["sliderCarousel"] = ref;
                },
                sliderScopeClassName: sty["sliderCarousel__slider"]
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "currentSlide",
                    plasmicStateName: "sliderCarousel.currentSlide"
                  }
                ],
                [],
                SliderWrapper_Helpers ?? {},
                child$Props
              );

              return (
                <SliderWrapper
                  data-plasmic-name={"sliderCarousel"}
                  data-plasmic-override={overrides.sliderCarousel}
                  {...child$Props}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qHuu2)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__e8Vm)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      src={{
                        src: "/plasmic/copy_of_vnpt_composable_platform/images/_3319X1263X0432753290807359514742607341054449969786259N1Png.png",
                        fullWidth: 1010,
                        fullHeight: 200,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___6IN2J)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__vaK4F)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      src={{
                        src: "/plasmic/copy_of_vnpt_composable_platform/images/_3319X1263X0432753290807359514742607341054449969786259N1Png.png",
                        fullWidth: 1010,
                        fullHeight: 200,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iTuZq)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___92QA)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      src={{
                        src: "/plasmic/copy_of_vnpt_composable_platform/images/_3319X1263X0432753290807359514742607341054449969786259N1Png.png",
                        fullWidth: 1010,
                        fullHeight: 200,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </SliderWrapper>
              );
            })()}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___6PNl5)}>
            <div className={classNames(projectcss.all, sty.freeBox__lqKpp)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iuIx
                )}
              >
                {"Tin tuy\u1ec3n d\u1ee5ng n\u1ed5i b\u1eadt"}
              </div>
              <div
                data-plasmic-name={"viewAll2"}
                data-plasmic-override={overrides.viewAll2}
                className={classNames(projectcss.all, sty.viewAll2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___945VH
                  )}
                >
                  {"Xem t\u1ea5t c\u1ea3"}
                </div>
                <Right2SvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__xxzv0)}
                  role={"img"}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__v0Cg)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__paQUn
                )}
              >
                {"T\u1ea5t c\u1ea3"}
              </div>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return ["Kỹ sư", "Hành chính - Nhân sự"];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kxc5U
                    )}
                    key={currentIndex}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "B\u00e1n h\u00e0ng";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                );
              })}
            </div>
            <DataFetcher
              data-plasmic-name={"queryRequirementNews"}
              data-plasmic-override={overrides.queryRequirementNews}
              body={{
                path: [],
                params: [
                  { key: "window.localStorage?.access_token" },
                  { key: "custom1.model.id", value: null }
                ],
                viewMode: true,
                applicationId: "6849c2ab3d0f525d93529454",
                queryId: "7wsuhgveenx9i06k0ululo43"
              }}
              className={classNames("__wab_instance", sty.queryRequirementNews)}
              dataName={"requirementNewsData"}
              errorDisplay={
                <DataCtxReader__>
                  {$ctx => "Error fetching data"}
                </DataCtxReader__>
              }
              errorName={"requirementNewsError"}
              loadingDisplay={
                <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
              }
              method={"POST"}
              noLayout={false}
              url={"https://vieclam.gov.vn/api/query/execute"}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rMnaw)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $ctx.requirementNewsData.data.data;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <RecruitmentNews
                          data-plasmic-name={"recruitmentNews"}
                          data-plasmic-override={overrides.recruitmentNews}
                          addressTime={(() => {
                            try {
                              return `${currentItem.ten_tinh2} - ${currentItem.ngay_het_han}`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "addressTime";
                              }
                              throw e;
                            }
                          })()}
                          className={classNames(
                            "__wab_instance",
                            sty.recruitmentNews
                          )}
                          companyName={(() => {
                            try {
                              return currentItem.ten_ct;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "company_name";
                              }
                              throw e;
                            }
                          })()}
                          image={(() => {
                            try {
                              return undefined;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          key={currentIndex}
                          salary={(() => {
                            try {
                              return currentItem.muc_luongid + " triệu";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          title={(() => {
                            try {
                              return currentItem.vitri_td;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "title";
                              }
                              throw e;
                            }
                          })()}
                        />
                      );
                    })}
                  </div>
                )}
              </DataCtxReader__>
            </DataFetcher>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__tEd4U)}>
            <div className={classNames(projectcss.all, sty.freeBox__noNwt)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ppNdc
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700, color: "#000000" }}
                  >
                    {"C\u00e1c ng\u00e0nh ngh\u1ec1 n\u1ed5i b\u1eadt"}
                  </span>
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"viewAll3"}
                data-plasmic-override={overrides.viewAll3}
                className={classNames(projectcss.all, sty.viewAll3)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mndh
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#1967D2", fontWeight: 500 }}
                    >
                      {"Xem t\u1ea5t c\u1ea3"}
                    </span>
                  </React.Fragment>
                </div>
                <Right2SvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__rBgph)}
                  role={"img"}
                />
              </div>
            </div>
            <DataFetcher
              data-plasmic-name={"outstandingJob"}
              data-plasmic-override={overrides.outstandingJob}
              body={{
                path: [],
                params: [],
                viewMode: true,
                applicationId: "6849c2ab3d0f525d93529454",
                queryId: "eevdo0kfkc3kxxo5ox3j4p43"
              }}
              className={classNames("__wab_instance", sty.outstandingJob)}
              dataName={"outstandingJobData"}
              errorDisplay={
                <DataCtxReader__>
                  {$ctx => "Error fetching data"}
                </DataCtxReader__>
              }
              errorName={"outstandingJobError"}
              loadingDisplay={
                <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
              }
              method={"POST"}
              noLayout={false}
              url={"https://vieclam.gov.vn/api/query/execute"}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vng6)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $ctx.outstandingJobData.data.data;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <OutstandingJobCard
                          data-plasmic-name={"outstandingJobCard"}
                          data-plasmic-override={overrides.outstandingJobCard}
                          className={classNames(
                            "__wab_instance",
                            sty.outstandingJobCard
                          )}
                          key={currentIndex}
                          title={(() => {
                            try {
                              return currentItem.ten;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "title";
                              }
                              throw e;
                            }
                          })()}
                          totalEmployment={(() => {
                            try {
                              return (() => {
                                const a =
                                  currentItem.tong_so_vl === null
                                    ? `(0 việc làm)`
                                    : `(${currentItem.tong_so_vl} việc làm)`;
                                return a;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return 0;
                              }
                              throw e;
                            }
                          })()}
                        />
                      );
                    })}
                  </div>
                )}
              </DataCtxReader__>
            </DataFetcher>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__nSlZu)}>
            <div className={classNames(projectcss.all, sty.freeBox__bgj5O)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nto0L
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700, color: "#000000" }}
                  >
                    {"C\u00e1c c\u00f4ng ty n\u1ed5i b\u1eadt"}
                  </span>
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"viewAll4"}
                data-plasmic-override={overrides.viewAll4}
                className={classNames(projectcss.all, sty.viewAll4)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kowbF
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#1967D2", fontWeight: 500 }}
                    >
                      {"Xem t\u1ea5t c\u1ea3"}
                    </span>
                  </React.Fragment>
                </div>
                <Right2SvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__aOo83)}
                  role={"img"}
                />
              </div>
            </div>
            <DataFetcher
              data-plasmic-name={"outstadingCompanyFetch"}
              data-plasmic-override={overrides.outstadingCompanyFetch}
              body={{
                path: [],
                params: [],
                viewMode: true,
                applicationId: "6849c2ab3d0f525d93529454",
                queryId: "2akeey2g853ap7pujawsxuh6"
              }}
              className={classNames(
                "__wab_instance",
                sty.outstadingCompanyFetch
              )}
              dataName={"outstandingCompanyData"}
              errorDisplay={
                <DataCtxReader__>
                  {$ctx => "Error fetching data"}
                </DataCtxReader__>
              }
              errorName={"outstandingCompanyError"}
              loadingDisplay={
                <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
              }
              method={"POST"}
              noLayout={false}
              url={"https://vieclam.gov.vn/api/query/execute"}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hLecV)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $ctx.outstandingCompanyData.data.data.content;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <CompanyOutstanding
                          data-plasmic-name={"companyOutstanding"}
                          data-plasmic-override={overrides.companyOutstanding}
                          className={classNames(
                            "__wab_instance",
                            sty.companyOutstanding
                          )}
                          image={(() => {
                            try {
                              return currentItem.logo_url;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          key={currentIndex}
                          title={(() => {
                            try {
                              return currentItem.ho_ten;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "title";
                              }
                              throw e;
                            }
                          })()}
                        />
                      );
                    })}
                  </div>
                )}
              </DataCtxReader__>
            </DataFetcher>
            <div className={classNames(projectcss.all, sty.freeBox__bJyu)}>
              <div className={classNames(projectcss.all, sty.freeBox__g98Q)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gwCye
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700, color: "#FFFFFF" }}
                    >
                      {
                        "Th\u00f4ng tin th\u1ecb tr\u01b0\u1eddng vi\u1ec7c l\u00e0m h\u00f4m nay"
                      }
                    </span>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xmj8
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          const today = new Date();
                          const day = String(today.getDate()).padStart(2, "0");
                          const month = String(today.getMonth() + 1).padStart(
                            2,
                            "0"
                          );
                          const year = today.getFullYear();
                          const formatted = `${day}/${month}/${year}`;
                          return formatted;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___8IvDk)}>
                <div className={classNames(projectcss.all, sty.freeBox__yOiuV)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__s2V0)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xfEqb
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#FFFFFF", fontWeight: 700 }}
                        >
                          {
                            "T\u1ec9 l\u1ec7 th\u1ea5t nghi\u1ec7p gi\u1eefa c\u00e1c khu v\u1ef1c"
                          }
                        </span>
                      </React.Fragment>
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__pNfU0
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ynj6M
                          )}
                        >
                          {"Theo th\u00e1ng"}
                        </div>
                      }
                      type={"bordered"}
                    />
                  </div>
                  <SimpleChart
                    className={classNames("__wab_instance", sty.chart___50Ghs)}
                    data={[
                      { region: "APAC", revenue: 3294, spend: 2675 },
                      { region: "EMEA", revenue: 3245, spend: 3895 },
                      { region: "LATAM", revenue: 2165, spend: 3498 },
                      { region: "AMER", revenue: 3215, spend: 1656 }
                    ]}
                    fill={false}
                    interactive={true}
                    type={"line"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__qyhu9)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lf4YD)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pzxsy
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700, color: "#FFFFFF" }}
                        >
                          {
                            "Nhu c\u1ea7u tuy\u1ec3n d\u1ee5ng c\u00e1c ng\u00e0nh ngh\u1ec1"
                          }
                        </span>
                      </React.Fragment>
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___0Rxxu
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lgz2
                          )}
                        >
                          {"Theo th\u00e1ng"}
                        </div>
                      }
                      type={"bordered"}
                    />
                  </div>
                  <DataFetcher
                    body={{
                      path: [],
                      params: [
                        {
                          key: "customBieuDoPhai.model.callbackdata??5",
                          value: 5
                        }
                      ],
                      viewMode: true,
                      applicationId: "6849c2ab3d0f525d93529454",
                      queryId: "orspy4z8uoxox3z4apjsy7y0"
                    }}
                    className={classNames(
                      "__wab_instance",
                      sty.httpRestApiFetcher___11DbM
                    )}
                    dataName={"newsData"}
                    errorDisplay={
                      <DataCtxReader__>
                        {$ctx => "Error fetching data"}
                      </DataCtxReader__>
                    }
                    errorName={"newsError"}
                    loadingDisplay={
                      <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
                    }
                    method={"POST"}
                    noLayout={false}
                    url={"https://vieclam.gov.vn/api/query/execute"}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <SimpleChart
                          className={classNames(
                            "__wab_instance",
                            sty.chart___0Y3Ai
                          )}
                          data={$ctx.newsData.data.data.map(item => {
                            return {
                              "Tháng/năm": item.thang_nam,
                              "Số lượng tin": item.so_luong_tin
                            };
                          })}
                          title={``}
                          type={"bar"}
                        />
                      )}
                    </DataCtxReader__>
                  </DataFetcher>
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__k3LQc)}>
            <div className={classNames(projectcss.all, sty.freeBox__tTb8K)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gbqzD
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#000000", fontWeight: 700 }}
                  >
                    {
                      "Th\u1ed1ng k\u00ea c\u00e1c T\u1ec9nh/th\u00e0nh ph\u1ed1"
                    }
                  </span>
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"viewAll5"}
                data-plasmic-override={overrides.viewAll5}
                className={classNames(projectcss.all, sty.viewAll5)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jk3Jx
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#1967D2", fontWeight: 500 }}
                    >
                      {"Xem t\u1ea5t c\u1ea3"}
                    </span>
                  </React.Fragment>
                </div>
                <Right2SvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__k2SZc)}
                  role={"img"}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___0QBzm)}>
              <div className={classNames(projectcss.all, sty.freeBox__cYzHs)}>
                <DataFetcher
                  body={{
                    path: [],
                    params: [
                      { key: "table1.pageNo", value: 1 },
                      { key: "table1.pageSize", value: 5 }
                    ],
                    viewMode: true,
                    applicationId: "6849c2ab3d0f525d93529454",
                    queryId: "na64st0jphf2oka3n70er105"
                  }}
                  className={classNames(
                    "__wab_instance",
                    sty.httpRestApiFetcher__uMlfG
                  )}
                  dataName={"table1Data"}
                  errorDisplay={
                    <DataCtxReader__>
                      {$ctx => "Error fetching data"}
                    </DataCtxReader__>
                  }
                  errorName={"table1Error"}
                  loadingDisplay={
                    <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
                  }
                  method={"POST"}
                  noLayout={false}
                  url={"https://vieclam.gov.vn/api/query/execute"}
                >
                  <DataCtxReader__>
                    {$ctx =>
                      (() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.table),
                          data: (() => {
                            try {
                              return $ctx.table1Data.data.data;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return (() => {
                                  try {
                                    return $queries.queryUser;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })();
                              }
                              throw e;
                            }
                          })(),
                          fields: (() => {
                            const __composite = [
                              { key: "stt", fieldId: "stt", title: null },
                              {
                                key: "tinh_tp",
                                fieldId: "tinh_tp",
                                title: null
                              },
                              {
                                key: "so_ung_vien",
                                fieldId: "so_ung_vien",
                                title: null
                              },
                              {
                                key: "so_tin_td",
                                fieldId: "so_tin_td",
                                title: null
                              },
                              {
                                key: "so_phien_gdvl",
                                fieldId: "so_phien_gdvl",
                                title: null
                              }
                            ];
                            __composite["0"]["title"] = "STT";
                            __composite["1"]["title"] =
                              "T\u1ec9nh/th\u00e0nh ph\u1ed1";
                            __composite["2"]["title"] =
                              "S\u1ed1 \u1ee9ng vi\u00ean";
                            __composite["3"]["title"] = "S\u1ed1 tin";
                            __composite["4"]["title"] =
                              "S\u1ed1 phi\u00ean GDVL";
                            return __composite;
                          })(),

                          hideColumnPicker: true,
                          hideExports: true,
                          hideSearch: true,
                          onRowSelectionChanged: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKey",
                              ["table", "selectedRowKey"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRow",
                              ["table", "selectedRow"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRows",
                              ["table", "selectedRows"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKeys",
                              ["table", "selectedRowKeys"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                          },
                          pageSize: 5,
                          scopeClassName: sty["table__instance"],
                          selectedRowKey: generateStateValueProp($state, [
                            "table",
                            "selectedRowKey"
                          ]),
                          selectedRowKeys: generateStateValueProp($state, [
                            "table",
                            "selectedRowKeys"
                          ]),
                          themeResetClassName: classNames(
                            projectcss.root_reset,
                            projectcss.root_reset_tags,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            styleTokensClassNames,
                            styleTokensClassNames_antd_5_hostless,
                            styleTokensClassNames_library_tailwind_3_4_colors,
                            styleTokensClassNames_library_tailwind_3_4_number_tokens,
                            styleTokensClassNames_plasmic_rich_components
                          )
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "selectedRowKey",
                              plasmicStateName: "table.selectedRowKey"
                            },
                            {
                              name: "selectedRow",
                              plasmicStateName: "table.selectedRow"
                            },
                            {
                              name: "selectedRows",
                              plasmicStateName: "table.selectedRows"
                            },
                            {
                              name: "selectedRowKeys",
                              plasmicStateName: "table.selectedRowKeys"
                            }
                          ],
                          [],
                          RichTable_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <RichTable
                            data-plasmic-name={"table"}
                            data-plasmic-override={overrides.table}
                            {...child$Props}
                          />
                        );
                      })()
                    }
                  </DataCtxReader__>
                </DataFetcher>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__bvfbE)}>
                <DataFetcher
                  body={{
                    path: [],
                    params: [
                      { key: "table1.pageNo", value: 1 },
                      { key: "table1.pageSize", value: 5 }
                    ],
                    viewMode: true,
                    applicationId: "6849c2ab3d0f525d93529454",
                    queryId: "na64st0jphf2oka3n70er105"
                  }}
                  className={classNames(
                    "__wab_instance",
                    sty.httpRestApiFetcher__sfpBc
                  )}
                  dataName={"table2Data"}
                  errorDisplay={
                    <DataCtxReader__>
                      {$ctx => "Error fetching data"}
                    </DataCtxReader__>
                  }
                  errorName={"table2Error"}
                  loadingDisplay={
                    <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
                  }
                  method={"POST"}
                  noLayout={false}
                  previewSpinner={false}
                  url={"https://vieclam.gov.vn/api/query/execute"}
                >
                  <DataCtxReader__>
                    {$ctx =>
                      (() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.table2),
                          data: (() => {
                            try {
                              return $ctx.table2Data.data.data;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return (() => {
                                  try {
                                    return $queries.queryUser;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })();
                              }
                              throw e;
                            }
                          })(),
                          hideColumnPicker: true,
                          hideExports: true,
                          hideSearch: true,
                          onRowSelectionChanged: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKey",
                              ["table2", "selectedRowKey"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRow",
                              ["table2", "selectedRow"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRows",
                              ["table2", "selectedRows"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKeys",
                              ["table2", "selectedRowKeys"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                          },
                          pageSize: 5,
                          pagination: true,
                          scopeClassName: sty["table2__instance"],
                          selectedRowKey: generateStateValueProp($state, [
                            "table2",
                            "selectedRowKey"
                          ]),
                          selectedRowKeys: generateStateValueProp($state, [
                            "table2",
                            "selectedRowKeys"
                          ]),
                          themeResetClassName: classNames(
                            projectcss.root_reset,
                            projectcss.root_reset_tags,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            styleTokensClassNames,
                            styleTokensClassNames_antd_5_hostless,
                            styleTokensClassNames_library_tailwind_3_4_colors,
                            styleTokensClassNames_library_tailwind_3_4_number_tokens,
                            styleTokensClassNames_plasmic_rich_components
                          )
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "selectedRowKey",
                              plasmicStateName: "table2.selectedRowKey"
                            },
                            {
                              name: "selectedRow",
                              plasmicStateName: "table2.selectedRow"
                            },
                            {
                              name: "selectedRows",
                              plasmicStateName: "table2.selectedRows"
                            },
                            {
                              name: "selectedRowKeys",
                              plasmicStateName: "table2.selectedRowKeys"
                            }
                          ],
                          [],
                          RichTable_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <RichTable
                            data-plasmic-name={"table2"}
                            data-plasmic-override={overrides.table2}
                            {...child$Props}
                          />
                        );
                      })()
                    }
                  </DataCtxReader__>
                </DataFetcher>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__wiRpX)}>
            <div className={classNames(projectcss.all, sty.freeBox__d6Zog)}>
              <div className={classNames(projectcss.all, sty.freeBox__u8Gwu)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7CQnW
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FFFFFF", fontWeight: 700 }}
                    >
                      {"B\u1ea1n l\u00e0 nh\u00e0 tuy\u1ec3n d\u1ee5ng?"}
                    </span>
                  </React.Fragment>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__f6E6O)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pO6U
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF", fontWeight: 500 }}
                      >
                        {
                          "T\u00ecm \u1ee9ng vi\u00ean \u01b0u t\u00fa v\u00e0 \u0111\u0103ng tin m\u1ed9t c\u00e1ch d\u1ec5 d\u00e0ng"
                        }
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bPuHn)}
                  >
                    <PlusIcon
                      className={classNames(projectcss.all, sty.svg__oAb1)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__phTiE
                      )}
                    >
                      {"\u0110\u0103ng tuy\u1ec3n ngay"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rziY5)}
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__ux03V)}>
                <PlusIcon
                  className={classNames(projectcss.all, sty.svg__zy0Tt)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__m5TiN
                  )}
                >
                  {"\u0110\u0103ng tuy\u1ec3n ngay"}
                </div>
              </div>
            </div>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "logo",
    "overlay",
    "nhaTd",
    "menuSidebar",
    "searchBar",
    "searchInputHehehe",
    "provinceSearch",
    "menuItem",
    "workSessionTitle",
    "title",
    "viewAll",
    "sessionCard",
    "sliderCarousel",
    "viewAll2",
    "queryRequirementNews",
    "recruitmentNews",
    "viewAll3",
    "outstandingJob",
    "outstandingJobCard",
    "viewAll4",
    "outstadingCompanyFetch",
    "companyOutstanding",
    "viewAll5",
    "table",
    "table2",
    "footer"
  ],
  logo: ["logo"],
  overlay: ["overlay"],
  nhaTd: ["nhaTd"],
  menuSidebar: ["menuSidebar"],
  searchBar: ["searchBar", "searchInputHehehe", "provinceSearch", "menuItem"],
  searchInputHehehe: ["searchInputHehehe"],
  provinceSearch: ["provinceSearch", "menuItem"],
  menuItem: ["menuItem"],
  workSessionTitle: ["workSessionTitle", "title", "viewAll", "sessionCard"],
  title: ["title", "viewAll"],
  viewAll: ["viewAll"],
  sessionCard: ["sessionCard"],
  sliderCarousel: ["sliderCarousel"],
  viewAll2: ["viewAll2"],
  queryRequirementNews: ["queryRequirementNews", "recruitmentNews"],
  recruitmentNews: ["recruitmentNews"],
  viewAll3: ["viewAll3"],
  outstandingJob: ["outstandingJob", "outstandingJobCard"],
  outstandingJobCard: ["outstandingJobCard"],
  viewAll4: ["viewAll4"],
  outstadingCompanyFetch: ["outstadingCompanyFetch", "companyOutstanding"],
  companyOutstanding: ["companyOutstanding"],
  viewAll5: ["viewAll5"],
  table: ["table"],
  table2: ["table2"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  logo: "div";
  overlay: "div";
  nhaTd: typeof NhaTd;
  menuSidebar: "div";
  searchBar: "div";
  searchInputHehehe: typeof TextInput;
  provinceSearch: typeof Select;
  menuItem: typeof MenuItem;
  workSessionTitle: "div";
  title: "div";
  viewAll: "div";
  sessionCard: typeof SessionCard;
  sliderCarousel: typeof SliderWrapper;
  viewAll2: "div";
  queryRequirementNews: typeof DataFetcher;
  recruitmentNews: typeof RecruitmentNews;
  viewAll3: "div";
  outstandingJob: typeof DataFetcher;
  outstandingJobCard: typeof OutstandingJobCard;
  viewAll4: "div";
  outstadingCompanyFetch: typeof DataFetcher;
  companyOutstanding: typeof CompanyOutstanding;
  viewAll5: "div";
  table: typeof RichTable;
  table2: typeof RichTable;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    overlay: makeNodeComponent("overlay"),
    nhaTd: makeNodeComponent("nhaTd"),
    menuSidebar: makeNodeComponent("menuSidebar"),
    searchBar: makeNodeComponent("searchBar"),
    searchInputHehehe: makeNodeComponent("searchInputHehehe"),
    provinceSearch: makeNodeComponent("provinceSearch"),
    menuItem: makeNodeComponent("menuItem"),
    workSessionTitle: makeNodeComponent("workSessionTitle"),
    title: makeNodeComponent("title"),
    viewAll: makeNodeComponent("viewAll"),
    sessionCard: makeNodeComponent("sessionCard"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    viewAll2: makeNodeComponent("viewAll2"),
    queryRequirementNews: makeNodeComponent("queryRequirementNews"),
    recruitmentNews: makeNodeComponent("recruitmentNews"),
    viewAll3: makeNodeComponent("viewAll3"),
    outstandingJob: makeNodeComponent("outstandingJob"),
    outstandingJobCard: makeNodeComponent("outstandingJobCard"),
    viewAll4: makeNodeComponent("viewAll4"),
    outstadingCompanyFetch: makeNodeComponent("outstadingCompanyFetch"),
    companyOutstanding: makeNodeComponent("companyOutstanding"),
    viewAll5: makeNodeComponent("viewAll5"),
    table: makeNodeComponent("table"),
    table2: makeNodeComponent("table2"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
