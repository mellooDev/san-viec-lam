/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9EC4CuzhysbPvP3VCVkLZh
// Component: 0EgktGnp9yoW

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9EC4CuzhysbPvP3VCVkLZh/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9EC4CuzhysbPvP3VCVkLZh/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9EC4CuzhysbPvP3VCVkLZh/projectcss
import sty from "./PlasmicSeachJobComponent.module.css"; // plasmic-import: 0EgktGnp9yoW/css

import ShoppingBagDiscountIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__ShoppingBagDiscount"; // plasmic-import: 7LKOdMQQyLky/icon
import LocationCheckSvgrepoComSvgIcon from "./icons/PlasmicIcon__LocationCheckSvgrepoComSvg"; // plasmic-import: cxruJQgN1lhV/icon
import UserPlusIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__UserPlus"; // plasmic-import: XRA2ow4WfUKa/icon
import CalendarSvgrepoComSvgIcon from "./icons/PlasmicIcon__CalendarSvgrepoComSvg"; // plasmic-import: C2QfmQ7lMBaA/icon
import HeartAltSvgrepoComSvgIcon from "./icons/PlasmicIcon__HeartAltSvgrepoComSvg"; // plasmic-import: tRWn_wMid5cg/icon

createPlasmicElementProxy;

export type PlasmicSeachJobComponent__VariantMembers = {};
export type PlasmicSeachJobComponent__VariantsArgs = {};
type VariantPropType = keyof PlasmicSeachJobComponent__VariantsArgs;
export const PlasmicSeachJobComponent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSeachJobComponent__ArgsType = {
  title?: string;
  province?: string;
  numberOfPeople?: string;
  experience?: string;
  id?: string;
};
type ArgPropType = keyof PlasmicSeachJobComponent__ArgsType;
export const PlasmicSeachJobComponent__ArgProps = new Array<ArgPropType>(
  "title",
  "province",
  "numberOfPeople",
  "experience",
  "id"
);

export type PlasmicSeachJobComponent__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  address?: Flex__<"div">;
};

export interface DefaultSeachJobComponentProps {
  title?: string;
  province?: string;
  numberOfPeople?: string;
  experience?: string;
  id?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSeachJobComponent__RenderFunc(props: {
  variants: PlasmicSeachJobComponent__VariantsArgs;
  args: PlasmicSeachJobComponent__ArgsType;
  overrides: PlasmicSeachJobComponent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_library_tailwind_3_4_colors,
        styleTokensClassNames_library_tailwind_3_4_number_tokens,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__zi9In)}>
        <div className={classNames(projectcss.all, sty.freeBox__rG7SP)}>
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={"https://placehold.co/94x94?text=Course"}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__xPplP)}>
          <div className={classNames(projectcss.all, sty.freeBox__g14S)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__frlWj
              )}
              onClick={async event => {
                const $steps = {};

                $steps["goToJobDetail"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/job-detail?id=${(() => {
                          try {
                            return $props.id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToJobDetail"] != null &&
                  typeof $steps["goToJobDetail"] === "object" &&
                  typeof $steps["goToJobDetail"].then === "function"
                ) {
                  $steps["goToJobDetail"] = await $steps["goToJobDetail"];
                }
              }}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__iOunG)}>
              <ShoppingBagDiscountIcon
                className={classNames(projectcss.all, sty.svg__vTfvX)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__l3QW
                )}
              >
                {"Enter some text"}
              </div>
            </div>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__l2Ynt
            )}
          >
            {"Enter some text"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___5TbP4)}>
            <div
              data-plasmic-name={"address"}
              data-plasmic-override={overrides.address}
              className={classNames(projectcss.all, sty.address)}
            >
              <LocationCheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__sapGg)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uksIh
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.province;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__fvb4X)}>
              <UserPlusIcon
                className={classNames(projectcss.all, sty.svg__kiK9E)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__l2S6B
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.numberOfPeople;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__cRpQ)}>
              <CalendarSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__ildAg)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vBnr0
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.experience;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__kk3XF)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__er7Dz
              )}
            >
              {"Enter some text"}
            </div>
            <HeartAltSvgrepoComSvgIcon
              className={classNames(projectcss.all, sty.svg__r2N4J)}
              role={"img"}
            />
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "address"],
  img: ["img"],
  address: ["address"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  address: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSeachJobComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSeachJobComponent__VariantsArgs;
    args?: PlasmicSeachJobComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSeachJobComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSeachJobComponent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSeachJobComponent__ArgProps,
          internalVariantPropNames: PlasmicSeachJobComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSeachJobComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSeachJobComponent";
  } else {
    func.displayName = `PlasmicSeachJobComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicSeachJobComponent = Object.assign(
  // Top-level PlasmicSeachJobComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    address: makeNodeComponent("address"),

    // Metadata about props expected for PlasmicSeachJobComponent
    internalVariantProps: PlasmicSeachJobComponent__VariantProps,
    internalArgProps: PlasmicSeachJobComponent__ArgProps
  }
);

export default PlasmicSeachJobComponent;
/* prettier-ignore-end */
