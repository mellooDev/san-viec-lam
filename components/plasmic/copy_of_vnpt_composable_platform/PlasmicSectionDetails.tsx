/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9EC4CuzhysbPvP3VCVkLZh
// Component: Oz3mYHrs7O_o

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NhaTd from "../../NhaTd"; // plasmic-import: oY2WxEuoZMYU/component
import Button from "../../Button"; // plasmic-import: 8b0EpCKEWBCK/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 9EC4CuzhysbPvP3VCVkLZh/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 9EC4CuzhysbPvP3VCVkLZh/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9EC4CuzhysbPvP3VCVkLZh/projectcss
import sty from "./PlasmicSectionDetails.module.css"; // plasmic-import: Oz3mYHrs7O_o/css

import NotificationSvgIcon from "./icons/PlasmicIcon__NotificationSvg"; // plasmic-import: CgRGninKlXOJ/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: LmY2C9AE0H1E/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: IZbzlkEshIXJ/icon

createPlasmicElementProxy;

export type PlasmicSectionDetails__VariantMembers = {};
export type PlasmicSectionDetails__VariantsArgs = {};
type VariantPropType = keyof PlasmicSectionDetails__VariantsArgs;
export const PlasmicSectionDetails__VariantProps = new Array<VariantPropType>();

export type PlasmicSectionDetails__ArgsType = {};
type ArgPropType = keyof PlasmicSectionDetails__ArgsType;
export const PlasmicSectionDetails__ArgProps = new Array<ArgPropType>();

export type PlasmicSectionDetails__OverridesType = {
  root?: Flex__<"div">;
  logo?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  nhaTd?: Flex__<typeof NhaTd>;
  svg?: Flex__<"svg">;
  button?: Flex__<typeof Button>;
};

export interface DefaultSectionDetailsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionDetails__RenderFunc(props: {
  variants: PlasmicSectionDetails__VariantsArgs;
  args: PlasmicSectionDetails__ArgsType;
  overrides: PlasmicSectionDetails__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_library_tailwind_3_4_colors,
            styleTokensClassNames_library_tailwind_3_4_number_tokens,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ovqAd)}>
            <div
              data-plasmic-name={"logo"}
              data-plasmic-override={overrides.logo}
              className={classNames(projectcss.all, sty.logo)}
            >
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                height={"45px"}
                loading={"lazy"}
                src={
                  "https://storage.vieclam.gov.vn/san-viec-lam-image/logoSan.png"
                }
                width={"44px"}
              />

              <div className={classNames(projectcss.all, sty.freeBox__s8En)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jn72G
                  )}
                >
                  {"B\u1ed8 N\u1ed8I V\u1ee4"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__g7ZGz
                  )}
                >
                  {"S\u00c0N GIAO D\u1ecaCH VI\u1ec6C L\u00c0M QU\u1ed0C GIA"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ru7Br
                  )}
                >
                  {
                    "Vi\u1ec7c t\u00ecm ng\u01b0\u1eddi - Ng\u01b0\u1eddi t\u00ecm vi\u1ec7c"
                  }
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__eV6Hv)}>
              <NhaTd
                data-plasmic-name={"nhaTd"}
                data-plasmic-override={overrides.nhaTd}
                className={classNames("__wab_instance", sty.nhaTd)}
              />

              <div className={classNames(projectcss.all, sty.freeBox__txymb)}>
                <NotificationSvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </div>
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hL3Cz
                    )}
                  >
                    {"\u0110\u0103ng nh\u1eadp"}
                  </div>
                }
              />
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "logo", "img", "nhaTd", "svg", "button"],
  logo: ["logo", "img"],
  img: ["img"],
  nhaTd: ["nhaTd"],
  svg: ["svg"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  logo: "div";
  img: typeof PlasmicImg__;
  nhaTd: typeof NhaTd;
  svg: "svg";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionDetails__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionDetails__VariantsArgs;
    args?: PlasmicSectionDetails__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSectionDetails__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSectionDetails__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionDetails__ArgProps,
          internalVariantPropNames: PlasmicSectionDetails__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionDetails__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionDetails";
  } else {
    func.displayName = `PlasmicSectionDetails.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionDetails = Object.assign(
  // Top-level PlasmicSectionDetails renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    img: makeNodeComponent("img"),
    nhaTd: makeNodeComponent("nhaTd"),
    svg: makeNodeComponent("svg"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicSectionDetails
    internalVariantProps: PlasmicSectionDetails__VariantProps,
    internalArgProps: PlasmicSectionDetails__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSectionDetails;
/* prettier-ignore-end */
